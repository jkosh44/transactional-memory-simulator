<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2486" onload="init(evt)" viewBox="0 0 1200 2486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2469" > </text>
<g id="frames">
<g >
<title>__anon_vma_prepare (3 samples, 0.76%)</title><rect x="1011.7" y="2005" width="8.9" height="15.0" fill="rgb(225,221,2)" rx="2" ry="2" />
<text  x="1014.66" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1589" width="166.4" height="15.0" fill="rgb(231,164,6)" rx="2" ry="2" />
<text  x="24.89" y="1599.5" >[unknown]</text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.25%)</title><rect x="452.9" y="2197" width="2.9" height="15.0" fill="rgb(250,50,48)" rx="2" ry="2" />
<text  x="455.87" y="2207.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;::__uniq_ptr_impl(std::thread::_State*) (2 samples, 0.50%)</title><rect x="1065.2" y="2101" width="5.9" height="15.0" fill="rgb(216,214,8)" rx="2" ry="2" />
<text  x="1068.16" y="2111.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="645" width="166.4" height="15.0" fill="rgb(253,28,0)" rx="2" ry="2" />
<text  x="24.89" y="655.5" >[unknown]</text>
</g>
<g >
<title>anon_vma_clone (1 samples, 0.25%)</title><rect x="27.8" y="261" width="3.0" height="15.0" fill="rgb(229,151,23)" rx="2" ry="2" />
<text  x="30.83" y="271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1029" width="166.4" height="15.0" fill="rgb(209,167,34)" rx="2" ry="2" />
<text  x="24.89" y="1039.5" >[unknown]</text>
</g>
<g >
<title>put_pid.part.0 (1 samples, 0.25%)</title><rect x="693.6" y="2277" width="3.0" height="15.0" fill="rgb(246,27,44)" rx="2" ry="2" />
<text  x="696.63" y="2287.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::operator=(std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="1083.0" y="2309" width="3.0" height="15.0" fill="rgb(220,51,20)" rx="2" ry="2" />
<text  x="1086.00" y="2319.5" ></text>
</g>
<g >
<title>__x64_sys_clone (1 samples, 0.25%)</title><rect x="250.8" y="2341" width="2.9" height="15.0" fill="rgb(239,0,4)" rx="2" ry="2" />
<text  x="253.76" y="2351.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="757" width="166.4" height="15.0" fill="rgb(244,60,18)" rx="2" ry="2" />
<text  x="24.89" y="767.5" >[unknown]</text>
</g>
<g >
<title>__x64_sys_clone (186 samples, 46.85%)</title><rect x="259.7" y="2341" width="552.8" height="15.0" fill="rgb(239,59,9)" rx="2" ry="2" />
<text  x="262.67" y="2351.5" >__x64_sys_clone</text>
</g>
<g >
<title>init_numa_balancing (1 samples, 0.25%)</title><rect x="658.0" y="2229" width="2.9" height="15.0" fill="rgb(209,41,0)" rx="2" ry="2" />
<text  x="660.96" y="2239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1701" width="166.4" height="15.0" fill="rgb(243,201,10)" rx="2" ry="2" />
<text  x="24.89" y="1711.5" >[unknown]</text>
</g>
<g >
<title>vm_mmap_pgoff (10 samples, 2.52%)</title><rect x="1160.3" y="2309" width="29.7" height="15.0" fill="rgb(229,169,39)" rx="2" ry="2" />
<text  x="1163.28" y="2319.5" >vm..</text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::swap(std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;&amp;) (1 samples, 0.25%)</title><rect x="842.2" y="2293" width="3.0" height="15.0" fill="rgb(216,167,34)" rx="2" ry="2" />
<text  x="845.24" y="2303.5" ></text>
</g>
<g >
<title>security_mmap_file (2 samples, 0.50%)</title><rect x="1181.1" y="2277" width="5.9" height="15.0" fill="rgb(215,193,7)" rx="2" ry="2" />
<text  x="1184.08" y="2287.5" ></text>
</g>
<g >
<title>find_vm_area (2 samples, 0.50%)</title><rect x="586.6" y="2261" width="6.0" height="15.0" fill="rgb(224,9,52)" rx="2" ry="2" />
<text  x="589.62" y="2271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr() (1 samples, 0.25%)</title><rect x="872.0" y="2133" width="2.9" height="15.0" fill="rgb(210,212,51)" rx="2" ry="2" />
<text  x="874.96" y="2143.5" ></text>
</g>
<g >
<title>security_mmap_file (2 samples, 0.50%)</title><rect x="1181.1" y="2293" width="5.9" height="15.0" fill="rgb(243,175,17)" rx="2" ry="2" />
<text  x="1184.08" y="2303.5" ></text>
</g>
<g >
<title>alloc_pid (11 samples, 2.77%)</title><rect x="274.5" y="2261" width="32.7" height="15.0" fill="rgb(216,85,11)" rx="2" ry="2" />
<text  x="277.53" y="2271.5" >al..</text>
</g>
<g >
<title>__x64_sys_mmap (10 samples, 2.52%)</title><rect x="1160.3" y="2341" width="29.7" height="15.0" fill="rgb(222,110,2)" rx="2" ry="2" />
<text  x="1163.28" y="2351.5" >__..</text>
</g>
<g >
<title>change_pte_range (3 samples, 0.76%)</title><rect x="931.4" y="1973" width="8.9" height="15.0" fill="rgb(246,172,48)" rx="2" ry="2" />
<text  x="934.41" y="1983.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.25%)</title><rect x="574.7" y="2213" width="3.0" height="15.0" fill="rgb(206,30,10)" rx="2" ry="2" />
<text  x="577.74" y="2223.5" ></text>
</g>
<g >
<title>page_counter_uncharge (2 samples, 0.50%)</title><rect x="125.9" y="165" width="6.0" height="15.0" fill="rgb(208,161,6)" rx="2" ry="2" />
<text  x="128.92" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (7 samples, 1.76%)</title><rect x="102.1" y="181" width="20.8" height="15.0" fill="rgb(210,48,4)" rx="2" ry="2" />
<text  x="105.14" y="191.5" ></text>
</g>
<g >
<title>futex_wake (2 samples, 0.50%)</title><rect x="1139.5" y="2309" width="5.9" height="15.0" fill="rgb(218,201,14)" rx="2" ry="2" />
<text  x="1142.47" y="2319.5" ></text>
</g>
<g >
<title>do_syscall_64 (188 samples, 47.36%)</title><rect x="253.7" y="2357" width="558.8" height="15.0" fill="rgb(245,109,38)" rx="2" ry="2" />
<text  x="256.73" y="2367.5" >do_syscall_64</text>
</g>
<g >
<title>vm_area_dup (1 samples, 0.25%)</title><rect x="30.8" y="261" width="3.0" height="15.0" fill="rgb(226,169,31)" rx="2" ry="2" />
<text  x="33.81" y="271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1461" width="166.4" height="15.0" fill="rgb(224,34,51)" rx="2" ry="2" />
<text  x="24.89" y="1471.5" >[unknown]</text>
</g>
<g >
<title>memset_erms (1 samples, 0.25%)</title><rect x="646.1" y="2277" width="2.9" height="15.0" fill="rgb(248,90,4)" rx="2" ry="2" />
<text  x="649.07" y="2287.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="613" width="166.4" height="15.0" fill="rgb(218,101,50)" rx="2" ry="2" />
<text  x="24.89" y="623.5" >[unknown]</text>
</g>
<g >
<title>std::call_once&lt;void (std::thread::*)(), std::thread*&gt;(std::once_flag&amp;, void (std::thread::*&amp;&amp;)(), std::thread*&amp;&amp;)::{lambda()#2}::_FUN() (2 samples, 0.50%)</title><rect x="188.3" y="2373" width="6.0" height="15.0" fill="rgb(240,96,7)" rx="2" ry="2" />
<text  x="191.34" y="2383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (24 samples, 6.05%)</title><rect x="910.6" y="2101" width="71.3" height="15.0" fill="rgb(225,10,19)" rx="2" ry="2" />
<text  x="913.60" y="2111.5" >entry_SY..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1637" width="166.4" height="15.0" fill="rgb(236,187,19)" rx="2" ry="2" />
<text  x="24.89" y="1647.5" >[unknown]</text>
</g>
<g >
<title>flush_tlb_mm_range (10 samples, 2.52%)</title><rect x="72.4" y="229" width="29.7" height="15.0" fill="rgb(227,0,7)" rx="2" ry="2" />
<text  x="75.42" y="239.5" >fl..</text>
</g>
<g >
<title>uncharge_batch (2 samples, 0.50%)</title><rect x="125.9" y="181" width="6.0" height="15.0" fill="rgb(208,112,32)" rx="2" ry="2" />
<text  x="128.92" y="191.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2245" width="166.4" height="15.0" fill="rgb(244,130,12)" rx="2" ry="2" />
<text  x="24.89" y="2255.5" >[unknown]</text>
</g>
<g >
<title>std::__basic_future&lt;int&gt;::_M_get_result() const (3 samples, 0.76%)</title><rect x="833.3" y="2325" width="8.9" height="15.0" fill="rgb(210,0,15)" rx="2" ry="2" />
<text  x="836.32" y="2335.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (3 samples, 0.76%)</title><rect x="81.3" y="165" width="9.0" height="15.0" fill="rgb(220,96,21)" rx="2" ry="2" />
<text  x="84.34" y="175.5" ></text>
</g>
<g >
<title>_dl_deallocate_tls (1 samples, 0.25%)</title><rect x="1151.4" y="2405" width="2.9" height="15.0" fill="rgb(223,157,6)" rx="2" ry="2" />
<text  x="1154.36" y="2415.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.25%)</title><rect x="1038.4" y="1973" width="3.0" height="15.0" fill="rgb(220,167,9)" rx="2" ry="2" />
<text  x="1041.41" y="1983.5" ></text>
</g>
<g >
<title>void std::call_once&lt;void (std::thread::*)(), std::thread*&gt;(std::once_flag&amp;, void (std::thread::*&amp;&amp;)(), std::thread*&amp;&amp;) (1 samples, 0.25%)</title><rect x="833.3" y="2261" width="3.0" height="15.0" fill="rgb(236,133,9)" rx="2" ry="2" />
<text  x="836.32" y="2271.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.25%)</title><rect x="601.5" y="2165" width="3.0" height="15.0" fill="rgb(224,222,26)" rx="2" ry="2" />
<text  x="604.49" y="2175.5" ></text>
</g>
<g >
<title>security_task_alloc (1 samples, 0.25%)</title><rect x="681.7" y="2277" width="3.0" height="15.0" fill="rgb(233,214,12)" rx="2" ry="2" />
<text  x="684.74" y="2287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (55 samples, 13.85%)</title><rect x="21.9" y="357" width="163.5" height="15.0" fill="rgb(238,18,14)" rx="2" ry="2" />
<text  x="24.89" y="367.5" >entry_SYSCALL_64_afte..</text>
</g>
<g >
<title>__x64_sys_munmap (54 samples, 13.60%)</title><rect x="21.9" y="325" width="160.5" height="15.0" fill="rgb(223,77,37)" rx="2" ry="2" />
<text  x="24.89" y="335.5" >__x64_sys_munmap</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1909" width="166.4" height="15.0" fill="rgb(219,175,17)" rx="2" ry="2" />
<text  x="24.89" y="1919.5" >[unknown]</text>
</g>
<g >
<title>do_anonymous_page (14 samples, 3.53%)</title><rect x="1011.7" y="2021" width="41.6" height="15.0" fill="rgb(238,70,37)" rx="2" ry="2" />
<text  x="1014.66" y="2031.5" >do_..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="741" width="166.4" height="15.0" fill="rgb(248,28,21)" rx="2" ry="2" />
<text  x="24.89" y="751.5" >[unknown]</text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.25%)</title><rect x="235.9" y="2245" width="3.0" height="15.0" fill="rgb(242,7,42)" rx="2" ry="2" />
<text  x="238.89" y="2255.5" ></text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.25%)</title><rect x="128.9" y="117" width="3.0" height="15.0" fill="rgb(233,134,5)" rx="2" ry="2" />
<text  x="131.89" y="127.5" ></text>
</g>
<g >
<title>try_charge (4 samples, 1.01%)</title><rect x="387.5" y="2213" width="11.9" height="15.0" fill="rgb(241,164,46)" rx="2" ry="2" />
<text  x="390.48" y="2223.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::_Tuple_impl(std::_Tuple_impl&lt;0ul, int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="904.7" y="2117" width="2.9" height="15.0" fill="rgb(245,211,23)" rx="2" ry="2" />
<text  x="907.66" y="2127.5" ></text>
</g>
<g >
<title>__x64_sys_futex (7 samples, 1.76%)</title><rect x="1115.7" y="2341" width="20.8" height="15.0" fill="rgb(248,227,28)" rx="2" ry="2" />
<text  x="1118.69" y="2351.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2213" width="166.4" height="15.0" fill="rgb(229,48,46)" rx="2" ry="2" />
<text  x="24.89" y="2223.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1189" width="166.4" height="15.0" fill="rgb(240,123,48)" rx="2" ry="2" />
<text  x="24.89" y="1199.5" >[unknown]</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;std::decay&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;)&gt;::type, std::decay&lt;TransactionManager*&amp;&gt;::type, std::decay&lt;std::function&lt;void (Transaction*)&gt; const&amp;&gt;::type&gt; &gt; std::thread::__make_invoker&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;&gt;(int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;) (2 samples, 0.50%)</title><rect x="1088.9" y="2309" width="6.0" height="15.0" fill="rgb(218,14,10)" rx="2" ry="2" />
<text  x="1091.94" y="2319.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (1 samples, 0.25%)</title><rect x="268.6" y="2261" width="3.0" height="15.0" fill="rgb(239,199,23)" rx="2" ry="2" />
<text  x="271.59" y="2271.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2() (4 samples, 1.01%)</title><rect x="863.0" y="2165" width="11.9" height="15.0" fill="rgb(244,155,36)" rx="2" ry="2" />
<text  x="866.05" y="2175.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_trace (1 samples, 0.25%)</title><rect x="559.9" y="2245" width="2.9" height="15.0" fill="rgb(215,203,18)" rx="2" ry="2" />
<text  x="562.87" y="2255.5" ></text>
</g>
<g >
<title>- (7 samples, 1.76%)</title><rect x="1115.7" y="2389" width="20.8" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="1118.69" y="2399.5" ></text>
</g>
<g >
<title>_cond_resched (2 samples, 0.50%)</title><rect x="568.8" y="2245" width="5.9" height="15.0" fill="rgb(221,147,52)" rx="2" ry="2" />
<text  x="571.79" y="2255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1365" width="166.4" height="15.0" fill="rgb(235,23,41)" rx="2" ry="2" />
<text  x="24.89" y="1375.5" >[unknown]</text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.50%)</title><rect x="307.2" y="2261" width="6.0" height="15.0" fill="rgb(221,131,42)" rx="2" ry="2" />
<text  x="310.23" y="2271.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.25%)</title><rect x="1002.7" y="2053" width="3.0" height="15.0" fill="rgb(205,47,16)" rx="2" ry="2" />
<text  x="1005.75" y="2063.5" ></text>
</g>
<g >
<title>_flat_send_IPI_mask (1 samples, 0.25%)</title><rect x="90.3" y="53" width="2.9" height="15.0" fill="rgb(227,163,37)" rx="2" ry="2" />
<text  x="93.25" y="63.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1957" width="166.4" height="15.0" fill="rgb(250,15,29)" rx="2" ry="2" />
<text  x="24.89" y="1967.5" >[unknown]</text>
</g>
<g >
<title>std::thread::_State*&amp; std::__get_helper&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;(std::_Tuple_impl&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;&amp;) (1 samples, 0.25%)</title><rect x="1065.2" y="2053" width="2.9" height="15.0" fill="rgb(243,223,40)" rx="2" ry="2" />
<text  x="1068.16" y="2063.5" ></text>
</g>
<g >
<title>alloc_pid (13 samples, 3.27%)</title><rect x="274.5" y="2277" width="38.7" height="15.0" fill="rgb(248,158,40)" rx="2" ry="2" />
<text  x="277.53" y="2287.5" >all..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;::~_Invoker() (1 samples, 0.25%)</title><rect x="1086.0" y="2309" width="2.9" height="15.0" fill="rgb(246,38,37)" rx="2" ry="2" />
<text  x="1088.97" y="2319.5" ></text>
</g>
<g >
<title>free_stacks (1 samples, 0.25%)</title><rect x="185.4" y="389" width="2.9" height="15.0" fill="rgb(233,15,44)" rx="2" ry="2" />
<text  x="188.37" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (17 samples, 4.28%)</title><rect x="1005.7" y="2037" width="50.5" height="15.0" fill="rgb(251,13,47)" rx="2" ry="2" />
<text  x="1008.72" y="2047.5" >__han..</text>
</g>
<g >
<title>__x64_sys_clone (1 samples, 0.25%)</title><rect x="250.8" y="2357" width="2.9" height="15.0" fill="rgb(205,1,10)" rx="2" ry="2" />
<text  x="253.76" y="2367.5" ></text>
</g>
<g >
<title>__munmap (55 samples, 13.85%)</title><rect x="21.9" y="389" width="163.5" height="15.0" fill="rgb(213,125,24)" rx="2" ry="2" />
<text  x="24.89" y="399.5" >__munmap</text>
</g>
<g >
<title>do_user_addr_fault (19 samples, 4.79%)</title><rect x="999.8" y="2069" width="56.4" height="15.0" fill="rgb(209,89,23)" rx="2" ry="2" />
<text  x="1002.77" y="2079.5" >do_us..</text>
</g>
<g >
<title>__handle_mm_fault (9 samples, 2.27%)</title><rect x="218.1" y="2309" width="26.7" height="15.0" fill="rgb(208,38,44)" rx="2" ry="2" />
<text  x="221.06" y="2319.5" >_..</text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.25%)</title><rect x="27.8" y="229" width="3.0" height="15.0" fill="rgb(246,213,11)" rx="2" ry="2" />
<text  x="30.83" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.25%)</title><rect x="586.6" y="2229" width="3.0" height="15.0" fill="rgb(240,176,9)" rx="2" ry="2" />
<text  x="589.62" y="2239.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.25%)</title><rect x="1017.6" y="1973" width="3.0" height="15.0" fill="rgb(236,203,42)" rx="2" ry="2" />
<text  x="1020.61" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1045" width="166.4" height="15.0" fill="rgb(245,75,43)" rx="2" ry="2" />
<text  x="24.89" y="1055.5" >[unknown]</text>
</g>
<g >
<title>kmem_cache_alloc_node_trace (1 samples, 0.25%)</title><rect x="559.9" y="2229" width="2.9" height="15.0" fill="rgb(222,172,0)" rx="2" ry="2" />
<text  x="562.87" y="2239.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (2 samples, 0.50%)</title><rect x="601.5" y="2261" width="5.9" height="15.0" fill="rgb(219,183,32)" rx="2" ry="2" />
<text  x="604.49" y="2271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy() (2 samples, 0.50%)</title><rect x="851.2" y="2245" width="5.9" height="15.0" fill="rgb(215,172,23)" rx="2" ry="2" />
<text  x="854.16" y="2255.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.25%)</title><rect x="925.5" y="2005" width="2.9" height="15.0" fill="rgb(219,94,2)" rx="2" ry="2" />
<text  x="928.47" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2389" width="166.4" height="15.0" fill="rgb(239,112,53)" rx="2" ry="2" />
<text  x="24.89" y="2399.5" >[unknown]</text>
</g>
<g >
<title>cgroup_css_set_put_fork (1 samples, 0.25%)</title><rect x="322.1" y="2245" width="3.0" height="15.0" fill="rgb(229,54,30)" rx="2" ry="2" />
<text  x="325.09" y="2255.5" ></text>
</g>
<g >
<title>new_slab (1 samples, 0.25%)</title><rect x="601.5" y="2213" width="3.0" height="15.0" fill="rgb(207,169,45)" rx="2" ry="2" />
<text  x="604.49" y="2223.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.25%)</title><rect x="182.4" y="325" width="3.0" height="15.0" fill="rgb(214,131,51)" rx="2" ry="2" />
<text  x="185.39" y="335.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (2 samples, 0.50%)</title><rect x="75.4" y="181" width="5.9" height="15.0" fill="rgb(243,149,47)" rx="2" ry="2" />
<text  x="78.39" y="191.5" ></text>
</g>
<g >
<title>memset_erms (7 samples, 1.76%)</title><rect x="625.3" y="2245" width="20.8" height="15.0" fill="rgb(218,24,4)" rx="2" ry="2" />
<text  x="628.26" y="2255.5" ></text>
</g>
<g >
<title>all (397 samples, 100%)</title><rect x="10.0" y="2437" width="1180.0" height="15.0" fill="rgb(233,4,33)" rx="2" ry="2" />
<text  x="13.00" y="2447.5" ></text>
</g>
<g >
<title>internal_get_user_pages_fast (1 samples, 0.25%)</title><rect x="1133.5" y="2245" width="3.0" height="15.0" fill="rgb(219,79,37)" rx="2" ry="2" />
<text  x="1136.53" y="2255.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1 samples, 0.25%)</title><rect x="54.6" y="261" width="3.0" height="15.0" fill="rgb(209,9,29)" rx="2" ry="2" />
<text  x="57.58" y="271.5" ></text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.25%)</title><rect x="1163.2" y="2245" width="3.0" height="15.0" fill="rgb(208,146,46)" rx="2" ry="2" />
<text  x="1166.25" y="2255.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;&amp;&gt;(std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;&amp;) (1 samples, 0.25%)</title><rect x="883.9" y="2309" width="2.9" height="15.0" fill="rgb(247,58,6)" rx="2" ry="2" />
<text  x="886.85" y="2319.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.25%)</title><rect x="1103.8" y="2293" width="3.0" height="15.0" fill="rgb(247,173,54)" rx="2" ry="2" />
<text  x="1106.80" y="2303.5" ></text>
</g>
<g >
<title>perf_event_fork (1 samples, 0.25%)</title><rect x="649.0" y="2277" width="3.0" height="15.0" fill="rgb(248,117,20)" rx="2" ry="2" />
<text  x="652.04" y="2287.5" ></text>
</g>
<g >
<title>task_active_pid_ns (1 samples, 0.25%)</title><rect x="684.7" y="2277" width="3.0" height="15.0" fill="rgb(233,137,45)" rx="2" ry="2" />
<text  x="687.71" y="2287.5" ></text>
</g>
<g >
<title>finish_task_switch (3 samples, 0.76%)</title><rect x="1121.6" y="2245" width="9.0" height="15.0" fill="rgb(220,49,22)" rx="2" ry="2" />
<text  x="1124.64" y="2255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1605" width="166.4" height="15.0" fill="rgb(208,127,4)" rx="2" ry="2" />
<text  x="24.89" y="1615.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1301" width="166.4" height="15.0" fill="rgb(225,35,5)" rx="2" ry="2" />
<text  x="24.89" y="1311.5" >[unknown]</text>
</g>
<g >
<title>dup_task_struct (3 samples, 0.76%)</title><rect x="577.7" y="2261" width="8.9" height="15.0" fill="rgb(217,29,35)" rx="2" ry="2" />
<text  x="580.71" y="2271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator*() const (1 samples, 0.25%)</title><rect x="836.3" y="2293" width="3.0" height="15.0" fill="rgb(242,187,22)" rx="2" ry="2" />
<text  x="839.30" y="2303.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::reset() (11 samples, 2.77%)</title><rect x="842.2" y="2309" width="32.7" height="15.0" fill="rgb(219,148,28)" rx="2" ry="2" />
<text  x="845.24" y="2319.5" >st..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.76%)</title><rect x="1115.7" y="2373" width="20.8" height="15.0" fill="rgb(253,133,12)" rx="2" ry="2" />
<text  x="1118.69" y="2383.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.25%)</title><rect x="476.6" y="2229" width="3.0" height="15.0" fill="rgb(222,179,9)" rx="2" ry="2" />
<text  x="479.65" y="2239.5" ></text>
</g>
<g >
<title>try_charge (5 samples, 1.26%)</title><rect x="384.5" y="2229" width="14.9" height="15.0" fill="rgb(209,116,6)" rx="2" ry="2" />
<text  x="387.51" y="2239.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (1 samples, 0.25%)</title><rect x="90.3" y="101" width="2.9" height="15.0" fill="rgb(240,109,36)" rx="2" ry="2" />
<text  x="93.25" y="111.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 1.26%)</title><rect x="479.6" y="2213" width="14.9" height="15.0" fill="rgb(219,190,8)" rx="2" ry="2" />
<text  x="482.62" y="2223.5" ></text>
</g>
<g >
<title>- (10 samples, 2.52%)</title><rect x="1160.3" y="2389" width="29.7" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="1163.28" y="2399.5" >-</text>
</g>
<g >
<title>__sched_fork (2 samples, 0.50%)</title><rect x="655.0" y="2261" width="5.9" height="15.0" fill="rgb(221,153,11)" rx="2" ry="2" />
<text  x="657.99" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2277" width="166.4" height="15.0" fill="rgb(214,23,45)" rx="2" ry="2" />
<text  x="24.89" y="2287.5" >[unknown]</text>
</g>
<g >
<title>up_read (1 samples, 0.25%)</title><rect x="247.8" y="2325" width="3.0" height="15.0" fill="rgb(231,177,46)" rx="2" ry="2" />
<text  x="250.78" y="2335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::reserve(unsigned long) (1 samples, 0.25%)</title><rect x="1103.8" y="2341" width="3.0" height="15.0" fill="rgb(205,192,31)" rx="2" ry="2" />
<text  x="1106.80" y="2351.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait() (2 samples, 0.50%)</title><rect x="827.4" y="2325" width="5.9" height="15.0" fill="rgb(249,34,8)" rx="2" ry="2" />
<text  x="830.38" y="2335.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join() (1 samples, 0.25%)</title><rect x="827.4" y="2293" width="3.0" height="15.0" fill="rgb(236,0,51)" rx="2" ry="2" />
<text  x="830.38" y="2303.5" ></text>
</g>
<g >
<title>do_user_addr_fault (15 samples, 3.78%)</title><rect x="203.2" y="2341" width="44.6" height="15.0" fill="rgb(209,77,42)" rx="2" ry="2" />
<text  x="206.20" y="2351.5" >do_u..</text>
</g>
<g >
<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (61 samples, 15.37%)</title><rect x="895.7" y="2165" width="181.4" height="15.0" fill="rgb(233,40,34)" rx="2" ry="2" />
<text  x="898.74" y="2175.5" >std::__future_base::_As..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="565" width="166.4" height="15.0" fill="rgb(254,152,33)" rx="2" ry="2" />
<text  x="24.89" y="575.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2229" width="166.4" height="15.0" fill="rgb(235,204,27)" rx="2" ry="2" />
<text  x="24.89" y="2239.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="437" width="166.4" height="15.0" fill="rgb(213,166,11)" rx="2" ry="2" />
<text  x="24.89" y="447.5" >[unknown]</text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.25%)</title><rect x="1115.7" y="2277" width="3.0" height="15.0" fill="rgb(251,212,53)" rx="2" ry="2" />
<text  x="1118.69" y="2287.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;::construct&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;*, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (61 samples, 15.37%)</title><rect x="895.7" y="2181" width="181.4" height="15.0" fill="rgb(232,206,16)" rx="2" ry="2" />
<text  x="898.74" y="2191.5" >void __gnu_cxx::new_all..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::_Tuple_impl&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;, void&gt;(int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;) (1 samples, 0.25%)</title><rect x="1091.9" y="2277" width="3.0" height="15.0" fill="rgb(233,147,18)" rx="2" ry="2" />
<text  x="1094.91" y="2287.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (65 samples, 16.37%)</title><rect x="886.8" y="2229" width="193.2" height="15.0" fill="rgb(238,96,26)" rx="2" ry="2" />
<text  x="889.83" y="2239.5" >std::__shared_count&lt;(__gn..</text>
</g>
<g >
<title>memset_erms (1 samples, 0.25%)</title><rect x="461.8" y="2197" width="3.0" height="15.0" fill="rgb(254,44,49)" rx="2" ry="2" />
<text  x="464.79" y="2207.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (19 samples, 4.79%)</title><rect x="999.8" y="2101" width="56.4" height="15.0" fill="rgb(223,56,0)" rx="2" ry="2" />
<text  x="1002.77" y="2111.5" >asm_e..</text>
</g>
<g >
<title>__memcg_kmem_charge_page (1 samples, 0.25%)</title><rect x="1020.6" y="1941" width="3.0" height="15.0" fill="rgb(241,196,33)" rx="2" ry="2" />
<text  x="1023.58" y="1951.5" ></text>
</g>
<g >
<title>alloc_vmap_area (19 samples, 4.79%)</title><rect x="411.3" y="2229" width="56.4" height="15.0" fill="rgb(234,58,47)" rx="2" ry="2" />
<text  x="414.26" y="2239.5" >alloc..</text>
</g>
<g >
<title>page_counter_cancel (2 samples, 0.50%)</title><rect x="125.9" y="149" width="6.0" height="15.0" fill="rgb(214,116,18)" rx="2" ry="2" />
<text  x="128.92" y="159.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.25%)</title><rect x="1023.6" y="1909" width="2.9" height="15.0" fill="rgb(230,184,45)" rx="2" ry="2" />
<text  x="1026.55" y="1919.5" ></text>
</g>
<g >
<title>map_kernel_range_noflush (1 samples, 0.25%)</title><rect x="562.8" y="2229" width="3.0" height="15.0" fill="rgb(220,189,18)" rx="2" ry="2" />
<text  x="565.85" y="2239.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.25%)</title><rect x="1023.6" y="1941" width="2.9" height="15.0" fill="rgb(207,47,19)" rx="2" ry="2" />
<text  x="1026.55" y="1951.5" ></text>
</g>
<g >
<title>unlink_anon_vmas (3 samples, 0.76%)</title><rect x="57.6" y="245" width="8.9" height="15.0" fill="rgb(213,156,44)" rx="2" ry="2" />
<text  x="60.56" y="255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1893" width="166.4" height="15.0" fill="rgb(208,44,51)" rx="2" ry="2" />
<text  x="24.89" y="1903.5" >[unknown]</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::~_Tuple_impl() (1 samples, 0.25%)</title><rect x="1086.0" y="2293" width="2.9" height="15.0" fill="rgb(229,216,11)" rx="2" ry="2" />
<text  x="1088.97" y="2303.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (20 samples, 5.04%)</title><rect x="72.4" y="261" width="59.5" height="15.0" fill="rgb(217,177,27)" rx="2" ry="2" />
<text  x="75.42" y="271.5" >tlb_fi..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2357" width="166.4" height="15.0" fill="rgb(247,100,15)" rx="2" ry="2" />
<text  x="24.89" y="2367.5" >[unknown]</text>
</g>
<g >
<title>__memcg_kmem_charge (11 samples, 2.77%)</title><rect x="366.7" y="2245" width="32.7" height="15.0" fill="rgb(240,214,49)" rx="2" ry="2" />
<text  x="369.68" y="2255.5" >__..</text>
</g>
<g >
<title>std::vector&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::push_back(std::future&lt;int&gt;&amp;&amp;) (3 samples, 0.76%)</title><rect x="1094.9" y="2341" width="8.9" height="15.0" fill="rgb(221,7,23)" rx="2" ry="2" />
<text  x="1097.89" y="2351.5" ></text>
</g>
<g >
<title>free_vmap_area_rb_augment_cb_rotate (1 samples, 0.25%)</title><rect x="455.8" y="2197" width="3.0" height="15.0" fill="rgb(219,108,9)" rx="2" ry="2" />
<text  x="458.84" y="2207.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1141" width="166.4" height="15.0" fill="rgb(214,13,22)" rx="2" ry="2" />
<text  x="24.89" y="1151.5" >[unknown]</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.25%)</title><rect x="999.8" y="2053" width="2.9" height="15.0" fill="rgb(251,69,7)" rx="2" ry="2" />
<text  x="1002.77" y="2063.5" ></text>
</g>
<g >
<title>unmap_page_range (14 samples, 3.53%)</title><rect x="134.8" y="229" width="41.6" height="15.0" fill="rgb(249,114,10)" rx="2" ry="2" />
<text  x="137.84" y="239.5" >unm..</text>
</g>
<g >
<title>__slab_alloc (2 samples, 0.50%)</title><rect x="601.5" y="2245" width="5.9" height="15.0" fill="rgb(209,98,14)" rx="2" ry="2" />
<text  x="604.49" y="2255.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;int&gt;::wait() const (3 samples, 0.76%)</title><rect x="824.4" y="2341" width="8.9" height="15.0" fill="rgb(237,77,28)" rx="2" ry="2" />
<text  x="827.41" y="2351.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1925" width="166.4" height="15.0" fill="rgb(243,190,15)" rx="2" ry="2" />
<text  x="24.89" y="1935.5" >[unknown]</text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.25%)</title><rect x="137.8" y="213" width="3.0" height="15.0" fill="rgb(227,146,17)" rx="2" ry="2" />
<text  x="140.81" y="223.5" ></text>
</g>
<g >
<title>__tlb_remove_page_size (1 samples, 0.25%)</title><rect x="140.8" y="181" width="3.0" height="15.0" fill="rgb(211,33,0)" rx="2" ry="2" />
<text  x="143.78" y="191.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1205" width="166.4" height="15.0" fill="rgb(226,82,12)" rx="2" ry="2" />
<text  x="24.89" y="1215.5" >[unknown]</text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.25%)</title><rect x="452.9" y="2181" width="2.9" height="15.0" fill="rgb(246,150,36)" rx="2" ry="2" />
<text  x="455.87" y="2191.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;::_M_head(std::_Tuple_impl&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;&amp;) (1 samples, 0.25%)</title><rect x="1065.2" y="2037" width="2.9" height="15.0" fill="rgb(234,31,52)" rx="2" ry="2" />
<text  x="1068.16" y="2047.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt; std::__future_base::_S_make_async_state&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (66 samples, 16.62%)</title><rect x="886.8" y="2309" width="196.2" height="15.0" fill="rgb(224,197,35)" rx="2" ry="2" />
<text  x="889.83" y="2319.5" >std::shared_ptr&lt;std::__fu..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1973" width="166.4" height="15.0" fill="rgb(254,45,22)" rx="2" ry="2" />
<text  x="24.89" y="1983.5" >[unknown]</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.50%)</title><rect x="1139.5" y="2357" width="5.9" height="15.0" fill="rgb(221,109,3)" rx="2" ry="2" />
<text  x="1142.47" y="2367.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (1 samples, 0.25%)</title><rect x="90.3" y="133" width="2.9" height="15.0" fill="rgb(213,175,31)" rx="2" ry="2" />
<text  x="93.25" y="143.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1349" width="166.4" height="15.0" fill="rgb(253,46,31)" rx="2" ry="2" />
<text  x="24.89" y="1359.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1717" width="166.4" height="15.0" fill="rgb(244,181,17)" rx="2" ry="2" />
<text  x="24.89" y="1727.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="853" width="166.4" height="15.0" fill="rgb(232,30,54)" rx="2" ry="2" />
<text  x="24.89" y="863.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="421" width="166.4" height="15.0" fill="rgb(246,211,49)" rx="2" ry="2" />
<text  x="24.89" y="431.5" >[unknown]</text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.25%)</title><rect x="381.5" y="2213" width="3.0" height="15.0" fill="rgb(241,223,11)" rx="2" ry="2" />
<text  x="384.54" y="2223.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;::destroy&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;(std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;*) (5 samples, 1.26%)</title><rect x="860.1" y="2213" width="14.8" height="15.0" fill="rgb(214,43,44)" rx="2" ry="2" />
<text  x="863.08" y="2223.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 1.01%)</title><rect x="1026.5" y="1989" width="11.9" height="15.0" fill="rgb(254,145,48)" rx="2" ry="2" />
<text  x="1029.52" y="1999.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (3 samples, 0.76%)</title><rect x="1041.4" y="1973" width="8.9" height="15.0" fill="rgb(218,12,42)" rx="2" ry="2" />
<text  x="1044.39" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="629" width="166.4" height="15.0" fill="rgb(234,11,53)" rx="2" ry="2" />
<text  x="24.89" y="639.5" >[unknown]</text>
</g>
<g >
<title>futex_wait (7 samples, 1.76%)</title><rect x="1115.7" y="2309" width="20.8" height="15.0" fill="rgb(252,70,29)" rx="2" ry="2" />
<text  x="1118.69" y="2319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int) (1 samples, 0.25%)</title><rect x="848.2" y="2229" width="3.0" height="15.0" fill="rgb(219,80,3)" rx="2" ry="2" />
<text  x="851.19" y="2239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1573" width="166.4" height="15.0" fill="rgb(224,0,45)" rx="2" ry="2" />
<text  x="24.89" y="1583.5" >[unknown]</text>
</g>
<g >
<title>std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::unique_ptr&gt; &gt; std::thread::_S_make_state&lt;std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;)::{lambda()#1}&gt; &gt; &gt;(std::thread::_Invoker&lt;std::tuple&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;)::{lambda()#1}&gt; &gt;&amp;&amp;) (2 samples, 0.50%)</title><rect x="1065.2" y="2133" width="5.9" height="15.0" fill="rgb(220,145,18)" rx="2" ry="2" />
<text  x="1068.16" y="2143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::_M_get_Tp_allocator() (1 samples, 0.25%)</title><rect x="1106.8" y="2325" width="2.9" height="15.0" fill="rgb(229,86,45)" rx="2" ry="2" />
<text  x="1109.78" y="2335.5" ></text>
</g>
<g >
<title>get_page_from_freelist (6 samples, 1.51%)</title><rect x="218.1" y="2245" width="17.8" height="15.0" fill="rgb(210,204,1)" rx="2" ry="2" />
<text  x="221.06" y="2255.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (2 samples, 0.50%)</title><rect x="238.9" y="2277" width="5.9" height="15.0" fill="rgb(237,133,32)" rx="2" ry="2" />
<text  x="241.87" y="2287.5" ></text>
</g>
<g >
<title>__split_vma (9 samples, 2.27%)</title><rect x="949.2" y="2005" width="26.8" height="15.0" fill="rgb(229,33,7)" rx="2" ry="2" />
<text  x="952.24" y="2015.5" >_..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="789" width="166.4" height="15.0" fill="rgb(228,24,47)" rx="2" ry="2" />
<text  x="24.89" y="799.5" >[unknown]</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.76%)</title><rect x="592.6" y="2229" width="8.9" height="15.0" fill="rgb(212,47,24)" rx="2" ry="2" />
<text  x="595.57" y="2239.5" ></text>
</g>
<g >
<title>proc_fork_connector (1 samples, 0.25%)</title><rect x="652.0" y="2261" width="3.0" height="15.0" fill="rgb(236,140,11)" rx="2" ry="2" />
<text  x="655.02" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1109" width="166.4" height="15.0" fill="rgb(205,46,54)" rx="2" ry="2" />
<text  x="24.89" y="1119.5" >[unknown]</text>
</g>
<g >
<title>dup_task_struct (95 samples, 23.93%)</title><rect x="363.7" y="2277" width="282.4" height="15.0" fill="rgb(222,14,6)" rx="2" ry="2" />
<text  x="366.70" y="2287.5" >dup_task_struct</text>
</g>
<g >
<title>can_vma_merge_before.part.0 (1 samples, 0.25%)</title><rect x="1175.1" y="2229" width="3.0" height="15.0" fill="rgb(232,71,3)" rx="2" ry="2" />
<text  x="1178.14" y="2239.5" ></text>
</g>
<g >
<title>cgroup_css_set_put_fork (1 samples, 0.25%)</title><rect x="322.1" y="2261" width="3.0" height="15.0" fill="rgb(239,61,5)" rx="2" ry="2" />
<text  x="325.09" y="2271.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.25%)</title><rect x="122.9" y="197" width="3.0" height="15.0" fill="rgb(232,103,31)" rx="2" ry="2" />
<text  x="125.95" y="207.5" ></text>
</g>
<g >
<title>copy_process (1 samples, 0.25%)</title><rect x="809.5" y="2309" width="3.0" height="15.0" fill="rgb(220,84,4)" rx="2" ry="2" />
<text  x="812.55" y="2319.5" ></text>
</g>
<g >
<title>copy_process (145 samples, 36.52%)</title><rect x="259.7" y="2293" width="431.0" height="15.0" fill="rgb(229,104,53)" rx="2" ry="2" />
<text  x="262.67" y="2303.5" >copy_process</text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="232.9" y="2229" width="3.0" height="15.0" fill="rgb(213,143,31)" rx="2" ry="2" />
<text  x="235.92" y="2239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1509" width="166.4" height="15.0" fill="rgb(245,11,7)" rx="2" ry="2" />
<text  x="24.89" y="1519.5" >[unknown]</text>
</g>
<g >
<title>unlink_anon_vmas (3 samples, 0.76%)</title><rect x="57.6" y="229" width="8.9" height="15.0" fill="rgb(228,87,4)" rx="2" ry="2" />
<text  x="60.56" y="239.5" ></text>
</g>
<g >
<title>vma_gap_callbacks_rotate (1 samples, 0.25%)</title><rect x="958.2" y="1941" width="2.9" height="15.0" fill="rgb(225,113,14)" rx="2" ry="2" />
<text  x="961.16" y="1951.5" ></text>
</g>
<g >
<title>apparmor_file_mprotect (2 samples, 0.50%)</title><rect x="913.6" y="2037" width="5.9" height="15.0" fill="rgb(222,96,3)" rx="2" ry="2" />
<text  x="916.58" y="2047.5" ></text>
</g>
<g >
<title>page_remove_rmap (1 samples, 0.25%)</title><rect x="143.8" y="197" width="2.9" height="15.0" fill="rgb(211,62,21)" rx="2" ry="2" />
<text  x="146.75" y="207.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt; &gt;::type&amp; std::get&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;(std::tuple&lt;std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;&amp;) (1 samples, 0.25%)</title><rect x="1065.2" y="2069" width="2.9" height="15.0" fill="rgb(251,169,5)" rx="2" ry="2" />
<text  x="1068.16" y="2079.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1413" width="166.4" height="15.0" fill="rgb(215,176,26)" rx="2" ry="2" />
<text  x="24.89" y="1423.5" >[unknown]</text>
</g>
<g >
<title>__get_vm_area_node (2 samples, 0.50%)</title><rect x="405.3" y="2229" width="6.0" height="15.0" fill="rgb(225,171,18)" rx="2" ry="2" />
<text  x="408.31" y="2239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2341" width="166.4" height="15.0" fill="rgb(225,186,24)" rx="2" ry="2" />
<text  x="24.89" y="2351.5" >[unknown]</text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.50%)</title><rect x="1020.6" y="1957" width="5.9" height="15.0" fill="rgb(213,49,3)" rx="2" ry="2" />
<text  x="1023.58" y="1967.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; std::allocate_shared&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; const&amp;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (66 samples, 16.62%)</title><rect x="886.8" y="2277" width="196.2" height="15.0" fill="rgb(216,115,52)" rx="2" ry="2" />
<text  x="889.83" y="2287.5" >std::shared_ptr&lt;std::__fu..</text>
</g>
<g >
<title>init_numa_balancing (1 samples, 0.25%)</title><rect x="658.0" y="2245" width="2.9" height="15.0" fill="rgb(252,224,54)" rx="2" ry="2" />
<text  x="660.96" y="2255.5" ></text>
</g>
<g >
<title>pids_can_fork (1 samples, 0.25%)</title><rect x="319.1" y="2261" width="3.0" height="15.0" fill="rgb(252,136,21)" rx="2" ry="2" />
<text  x="322.12" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2165" width="166.4" height="15.0" fill="rgb(233,143,45)" rx="2" ry="2" />
<text  x="24.89" y="2175.5" >[unknown]</text>
</g>
<g >
<title>__sched_text_start (4 samples, 1.01%)</title><rect x="1118.7" y="2261" width="11.9" height="15.0" fill="rgb(243,21,2)" rx="2" ry="2" />
<text  x="1121.66" y="2271.5" ></text>
</g>
<g >
<title>copy_process (1 samples, 0.25%)</title><rect x="809.5" y="2293" width="3.0" height="15.0" fill="rgb(253,121,18)" rx="2" ry="2" />
<text  x="812.55" y="2303.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.25%)</title><rect x="235.9" y="2261" width="3.0" height="15.0" fill="rgb(249,34,48)" rx="2" ry="2" />
<text  x="238.89" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1157" width="166.4" height="15.0" fill="rgb(247,225,38)" rx="2" ry="2" />
<text  x="24.89" y="1167.5" >[unknown]</text>
</g>
<g >
<title>rb_insert_color (1 samples, 0.25%)</title><rect x="464.8" y="2197" width="2.9" height="15.0" fill="rgb(211,92,1)" rx="2" ry="2" />
<text  x="467.76" y="2207.5" ></text>
</g>
<g >
<title>vma_dup_policy (1 samples, 0.25%)</title><rect x="179.4" y="261" width="3.0" height="15.0" fill="rgb(243,92,8)" rx="2" ry="2" />
<text  x="182.42" y="271.5" ></text>
</g>
<g >
<title>__vma_link_rb (1 samples, 0.25%)</title><rect x="961.1" y="1957" width="3.0" height="15.0" fill="rgb(253,135,24)" rx="2" ry="2" />
<text  x="964.13" y="1967.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int) (2 samples, 0.50%)</title><rect x="845.2" y="2245" width="6.0" height="15.0" fill="rgb(213,15,10)" rx="2" ry="2" />
<text  x="848.21" y="2255.5" ></text>
</g>
<g >
<title>std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::tuple&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;, true&gt;(int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;) (1 samples, 0.25%)</title><rect x="1091.9" y="2293" width="3.0" height="15.0" fill="rgb(232,124,42)" rx="2" ry="2" />
<text  x="1094.91" y="2303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_ptr() (1 samples, 0.25%)</title><rect x="857.1" y="2229" width="3.0" height="15.0" fill="rgb(229,39,14)" rx="2" ry="2" />
<text  x="860.10" y="2239.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.25%)</title><rect x="964.1" y="1941" width="3.0" height="15.0" fill="rgb(217,23,49)" rx="2" ry="2" />
<text  x="967.11" y="1951.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (16 samples, 4.03%)</title><rect x="203.2" y="2373" width="47.6" height="15.0" fill="rgb(244,111,51)" rx="2" ry="2" />
<text  x="206.20" y="2383.5" >asm_..</text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.25%)</title><rect x="955.2" y="1941" width="3.0" height="15.0" fill="rgb(250,184,19)" rx="2" ry="2" />
<text  x="958.19" y="1951.5" ></text>
</g>
<g >
<title>__x64_sys_futex (2 samples, 0.50%)</title><rect x="1139.5" y="2341" width="5.9" height="15.0" fill="rgb(234,227,23)" rx="2" ry="2" />
<text  x="1142.47" y="2351.5" ></text>
</g>
<g >
<title>pmd_page_vaddr (1 samples, 0.25%)</title><rect x="244.8" y="2309" width="3.0" height="15.0" fill="rgb(232,91,31)" rx="2" ry="2" />
<text  x="247.81" y="2319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.25%)</title><rect x="1103.8" y="2325" width="3.0" height="15.0" fill="rgb(209,25,7)" rx="2" ry="2" />
<text  x="1106.80" y="2335.5" ></text>
</g>
<g >
<title>vma_merge (4 samples, 1.01%)</title><rect x="1166.2" y="2261" width="11.9" height="15.0" fill="rgb(212,100,20)" rx="2" ry="2" />
<text  x="1169.22" y="2271.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="553.9" y="2197" width="3.0" height="15.0" fill="rgb(236,83,28)" rx="2" ry="2" />
<text  x="556.93" y="2207.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1829" width="166.4" height="15.0" fill="rgb(235,165,26)" rx="2" ry="2" />
<text  x="24.89" y="1839.5" >[unknown]</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (10 samples, 2.52%)</title><rect x="845.2" y="2277" width="29.7" height="15.0" fill="rgb(245,45,37)" rx="2" ry="2" />
<text  x="848.21" y="2287.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::deallocate(std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;&amp;, std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt;*, unsigned long) (2 samples, 0.50%)</title><rect x="851.2" y="2213" width="5.9" height="15.0" fill="rgb(215,87,46)" rx="2" ry="2" />
<text  x="854.16" y="2223.5" ></text>
</g>
<g >
<title>mprotect (24 samples, 6.05%)</title><rect x="910.6" y="2133" width="71.3" height="15.0" fill="rgb(227,131,46)" rx="2" ry="2" />
<text  x="913.60" y="2143.5" >mprotect</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::~_Async_state_commonV2() (4 samples, 1.01%)</title><rect x="863.0" y="2181" width="11.9" height="15.0" fill="rgb(231,73,36)" rx="2" ry="2" />
<text  x="866.05" y="2191.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void (std::thread::*)(), std::thread*&gt;::type std::__invoke&lt;void (std::thread::*)(), std::thread*&gt;(void (std::thread::*&amp;&amp;)(), std::thread*&amp;&amp;) (2 samples, 0.50%)</title><rect x="188.3" y="2325" width="6.0" height="15.0" fill="rgb(226,103,26)" rx="2" ry="2" />
<text  x="191.34" y="2335.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="725" width="166.4" height="15.0" fill="rgb(217,188,50)" rx="2" ry="2" />
<text  x="24.89" y="735.5" >[unknown]</text>
</g>
<g >
<title>clear_page_erms (3 samples, 0.76%)</title><rect x="1026.5" y="1941" width="8.9" height="15.0" fill="rgb(219,190,46)" rx="2" ry="2" />
<text  x="1029.52" y="1951.5" ></text>
</g>
<g >
<title>clear_page_erms (3 samples, 0.76%)</title><rect x="1026.5" y="1957" width="8.9" height="15.0" fill="rgb(245,161,23)" rx="2" ry="2" />
<text  x="1029.52" y="1967.5" ></text>
</g>
<g >
<title>send_call_function_single_ipi (1 samples, 0.25%)</title><rect x="90.3" y="117" width="2.9" height="15.0" fill="rgb(227,54,19)" rx="2" ry="2" />
<text  x="93.25" y="127.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="485" width="166.4" height="15.0" fill="rgb(209,45,42)" rx="2" ry="2" />
<text  x="24.89" y="495.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1269" width="166.4" height="15.0" fill="rgb(206,120,3)" rx="2" ry="2" />
<text  x="24.89" y="1279.5" >[unknown]</text>
</g>
<g >
<title>user_disable_single_step (1 samples, 0.25%)</title><rect x="687.7" y="2277" width="3.0" height="15.0" fill="rgb(242,187,33)" rx="2" ry="2" />
<text  x="690.68" y="2287.5" ></text>
</g>
<g >
<title>do_mmap (6 samples, 1.51%)</title><rect x="1160.3" y="2293" width="17.8" height="15.0" fill="rgb(240,225,20)" rx="2" ry="2" />
<text  x="1163.28" y="2303.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2021" width="166.4" height="15.0" fill="rgb(219,58,4)" rx="2" ry="2" />
<text  x="24.89" y="2031.5" >[unknown]</text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.25%)</title><rect x="378.6" y="2213" width="2.9" height="15.0" fill="rgb(222,143,36)" rx="2" ry="2" />
<text  x="381.56" y="2223.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2261" width="166.4" height="15.0" fill="rgb(237,35,0)" rx="2" ry="2" />
<text  x="24.89" y="2271.5" >[unknown]</text>
</g>
<g >
<title>cpuset_fork (1 samples, 0.25%)</title><rect x="360.7" y="2261" width="3.0" height="15.0" fill="rgb(216,226,42)" rx="2" ry="2" />
<text  x="363.73" y="2271.5" ></text>
</g>
<g >
<title>__sched_fork (1 samples, 0.25%)</title><rect x="271.6" y="2261" width="2.9" height="15.0" fill="rgb(254,67,53)" rx="2" ry="2" />
<text  x="274.56" y="2271.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.25%)</title><rect x="131.9" y="213" width="2.9" height="15.0" fill="rgb(216,6,2)" rx="2" ry="2" />
<text  x="134.86" y="223.5" ></text>
</g>
<g >
<title>page_counter_try_charge (4 samples, 1.01%)</title><rect x="366.7" y="2213" width="11.9" height="15.0" fill="rgb(220,96,4)" rx="2" ry="2" />
<text  x="369.68" y="2223.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="901" width="166.4" height="15.0" fill="rgb(245,15,16)" rx="2" ry="2" />
<text  x="24.89" y="911.5" >[unknown]</text>
</g>
<g >
<title>lru_add_drain_cpu (2 samples, 0.50%)</title><rect x="66.5" y="245" width="5.9" height="15.0" fill="rgb(214,157,46)" rx="2" ry="2" />
<text  x="69.47" y="255.5" ></text>
</g>
<g >
<title>__vma_adjust (3 samples, 0.76%)</title><rect x="1166.2" y="2245" width="8.9" height="15.0" fill="rgb(219,146,38)" rx="2" ry="2" />
<text  x="1169.22" y="2255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::allocate(std::allocator&lt;std::future&lt;int&gt; &gt;&amp;, unsigned long) (1 samples, 0.25%)</title><rect x="1103.8" y="2309" width="3.0" height="15.0" fill="rgb(206,30,46)" rx="2" ry="2" />
<text  x="1106.80" y="2319.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2() (1 samples, 0.25%)</title><rect x="895.7" y="2133" width="3.0" height="15.0" fill="rgb(236,147,40)" rx="2" ry="2" />
<text  x="898.74" y="2143.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1317" width="166.4" height="15.0" fill="rgb(249,55,36)" rx="2" ry="2" />
<text  x="24.89" y="1327.5" >[unknown]</text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;::~allocator() (1 samples, 0.25%)</title><rect x="1080.0" y="2229" width="3.0" height="15.0" fill="rgb(208,89,27)" rx="2" ry="2" />
<text  x="1083.03" y="2239.5" ></text>
</g>
<g >
<title>std::thread::id::id() (1 samples, 0.25%)</title><rect x="1056.2" y="2117" width="3.0" height="15.0" fill="rgb(222,120,18)" rx="2" ry="2" />
<text  x="1059.25" y="2127.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (22 samples, 5.54%)</title><rect x="913.6" y="2053" width="65.4" height="15.0" fill="rgb(214,129,6)" rx="2" ry="2" />
<text  x="916.58" y="2063.5" >do_mpro..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1445" width="166.4" height="15.0" fill="rgb(240,177,1)" rx="2" ry="2" />
<text  x="24.89" y="1455.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="453" width="166.4" height="15.0" fill="rgb(238,211,10)" rx="2" ry="2" />
<text  x="24.89" y="463.5" >[unknown]</text>
</g>
<g >
<title>do_user_addr_fault (5 samples, 1.26%)</title><rect x="203.2" y="2325" width="14.9" height="15.0" fill="rgb(237,202,42)" rx="2" ry="2" />
<text  x="206.20" y="2335.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_trace (1 samples, 0.25%)</title><rect x="470.7" y="2213" width="3.0" height="15.0" fill="rgb(220,16,10)" rx="2" ry="2" />
<text  x="473.71" y="2223.5" ></text>
</g>
<g >
<title>vma_dup_policy (1 samples, 0.25%)</title><rect x="179.4" y="277" width="3.0" height="15.0" fill="rgb(251,3,13)" rx="2" ry="2" />
<text  x="182.42" y="287.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.25%)</title><rect x="1187.0" y="2293" width="3.0" height="15.0" fill="rgb(248,62,12)" rx="2" ry="2" />
<text  x="1190.03" y="2303.5" ></text>
</g>
<g >
<title>vm_stat_account (1 samples, 0.25%)</title><rect x="976.0" y="2021" width="3.0" height="15.0" fill="rgb(251,115,11)" rx="2" ry="2" />
<text  x="978.99" y="2031.5" ></text>
</g>
<g >
<title>__pthread_once_slow (3 samples, 0.76%)</title><rect x="1136.5" y="2405" width="8.9" height="15.0" fill="rgb(238,96,27)" rx="2" ry="2" />
<text  x="1139.50" y="2415.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.25%)</title><rect x="24.9" y="261" width="2.9" height="15.0" fill="rgb(221,63,40)" rx="2" ry="2" />
<text  x="27.86" y="271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1525" width="166.4" height="15.0" fill="rgb(247,206,20)" rx="2" ry="2" />
<text  x="24.89" y="1535.5" >[unknown]</text>
</g>
<g >
<title>change_p4d_range (1 samples, 0.25%)</title><rect x="928.4" y="1989" width="3.0" height="15.0" fill="rgb(247,181,0)" rx="2" ry="2" />
<text  x="931.44" y="1999.5" ></text>
</g>
<g >
<title>std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::tuple(std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="904.7" y="2133" width="2.9" height="15.0" fill="rgb(217,45,2)" rx="2" ry="2" />
<text  x="907.66" y="2143.5" ></text>
</g>
<g >
<title>- (205 samples, 51.64%)</title><rect x="203.2" y="2389" width="609.3" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="206.20" y="2399.5" >-</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1941" width="166.4" height="15.0" fill="rgb(235,0,27)" rx="2" ry="2" />
<text  x="24.89" y="1951.5" >[unknown]</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::_Tuple_impl&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;, void&gt;(int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;) (1 samples, 0.25%)</title><rect x="1088.9" y="2293" width="3.0" height="15.0" fill="rgb(228,111,54)" rx="2" ry="2" />
<text  x="1091.94" y="2303.5" ></text>
</g>
<g >
<title>__get_vm_area_node (1 samples, 0.25%)</title><rect x="363.7" y="2261" width="3.0" height="15.0" fill="rgb(235,27,7)" rx="2" ry="2" />
<text  x="366.70" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="917" width="166.4" height="15.0" fill="rgb(227,35,38)" rx="2" ry="2" />
<text  x="24.89" y="927.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1653" width="166.4" height="15.0" fill="rgb(240,201,23)" rx="2" ry="2" />
<text  x="24.89" y="1663.5" >[unknown]</text>
</g>
<g >
<title>fpu__copy (1 samples, 0.25%)</title><rect x="574.7" y="2245" width="3.0" height="15.0" fill="rgb(209,144,13)" rx="2" ry="2" />
<text  x="577.74" y="2255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1125" width="166.4" height="15.0" fill="rgb(242,21,43)" rx="2" ry="2" />
<text  x="24.89" y="1135.5" >[unknown]</text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; &gt;::construct&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;&amp;, std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;*, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (61 samples, 15.37%)</title><rect x="895.7" y="2197" width="181.4" height="15.0" fill="rgb(205,113,38)" rx="2" ry="2" />
<text  x="898.74" y="2207.5" >void std::allocator_tra..</text>
</g>
<g >
<title>allocate_slab (1 samples, 0.25%)</title><rect x="601.5" y="2197" width="3.0" height="15.0" fill="rgb(208,214,32)" rx="2" ry="2" />
<text  x="604.49" y="2207.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2325" width="166.4" height="15.0" fill="rgb(233,190,52)" rx="2" ry="2" />
<text  x="24.89" y="2335.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2037" width="166.4" height="15.0" fill="rgb(234,86,29)" rx="2" ry="2" />
<text  x="24.89" y="2047.5" >[unknown]</text>
</g>
<g >
<title>clear_page_erms (14 samples, 3.53%)</title><rect x="494.5" y="2197" width="41.6" height="15.0" fill="rgb(227,204,37)" rx="2" ry="2" />
<text  x="497.48" y="2207.5" >cle..</text>
</g>
<g >
<title>smp_call_function_single (1 samples, 0.25%)</title><rect x="78.4" y="165" width="2.9" height="15.0" fill="rgb(228,51,33)" rx="2" ry="2" />
<text  x="81.36" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (7 samples, 1.76%)</title><rect x="660.9" y="2261" width="20.8" height="15.0" fill="rgb(254,147,21)" rx="2" ry="2" />
<text  x="663.93" y="2271.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="1035.4" y="1957" width="3.0" height="15.0" fill="rgb(250,33,15)" rx="2" ry="2" />
<text  x="1038.44" y="1967.5" ></text>
</g>
<g >
<title>__free_tcb (1 samples, 0.25%)</title><rect x="812.5" y="2405" width="3.0" height="15.0" fill="rgb(231,164,1)" rx="2" ry="2" />
<text  x="815.52" y="2415.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (6 samples, 1.51%)</title><rect x="1115.7" y="2293" width="17.8" height="15.0" fill="rgb(254,216,35)" rx="2" ry="2" />
<text  x="1118.69" y="2303.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1253" width="166.4" height="15.0" fill="rgb(231,94,34)" rx="2" ry="2" />
<text  x="24.89" y="1263.5" >[unknown]</text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.25%)</title><rect x="259.7" y="2229" width="2.9" height="15.0" fill="rgb(213,32,14)" rx="2" ry="2" />
<text  x="262.67" y="2239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="469" width="166.4" height="15.0" fill="rgb(250,103,7)" rx="2" ry="2" />
<text  x="24.89" y="479.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2149" width="166.4" height="15.0" fill="rgb(228,210,15)" rx="2" ry="2" />
<text  x="24.89" y="2159.5" >[unknown]</text>
</g>
<g >
<title>schedule (5 samples, 1.26%)</title><rect x="1118.7" y="2277" width="14.8" height="15.0" fill="rgb(231,202,20)" rx="2" ry="2" />
<text  x="1121.66" y="2287.5" ></text>
</g>
<g >
<title>memset_erms (7 samples, 1.76%)</title><rect x="625.3" y="2261" width="20.8" height="15.0" fill="rgb(206,161,3)" rx="2" ry="2" />
<text  x="628.26" y="2271.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (23 samples, 5.79%)</title><rect x="913.6" y="2069" width="68.3" height="15.0" fill="rgb(232,135,12)" rx="2" ry="2" />
<text  x="916.58" y="2079.5" >__x64_s..</text>
</g>
<g >
<title>std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::tuple(std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="1071.1" y="2149" width="3.0" height="15.0" fill="rgb(254,80,4)" rx="2" ry="2" />
<text  x="1074.11" y="2159.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.25%)</title><rect x="476.6" y="2245" width="3.0" height="15.0" fill="rgb(246,123,51)" rx="2" ry="2" />
<text  x="479.65" y="2255.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (7 samples, 1.76%)</title><rect x="81.3" y="181" width="20.8" height="15.0" fill="rgb(241,168,37)" rx="2" ry="2" />
<text  x="84.34" y="191.5" ></text>
</g>
<g >
<title>exc_page_fault (16 samples, 4.03%)</title><rect x="203.2" y="2357" width="47.6" height="15.0" fill="rgb(229,199,4)" rx="2" ry="2" />
<text  x="206.20" y="2367.5" >exc_..</text>
</g>
<g >
<title>should_failslab (1 samples, 0.25%)</title><rect x="565.8" y="2245" width="3.0" height="15.0" fill="rgb(229,170,11)" rx="2" ry="2" />
<text  x="568.82" y="2255.5" ></text>
</g>
<g >
<title>find_vmap_area (1 samples, 0.25%)</title><rect x="589.6" y="2229" width="3.0" height="15.0" fill="rgb(249,144,44)" rx="2" ry="2" />
<text  x="592.60" y="2239.5" ></text>
</g>
<g >
<title>operator delete(void*) (1 samples, 0.25%)</title><rect x="869.0" y="2101" width="3.0" height="15.0" fill="rgb(218,64,17)" rx="2" ry="2" />
<text  x="871.99" y="2111.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;::unique_ptr&lt;std::default_delete&lt;std::thread::_State&gt;, void&gt;(std::thread::_State*) (2 samples, 0.50%)</title><rect x="1065.2" y="2117" width="5.9" height="15.0" fill="rgb(236,31,47)" rx="2" ry="2" />
<text  x="1068.16" y="2127.5" ></text>
</g>
<g >
<title>__anon_vma_prepare (1 samples, 0.25%)</title><rect x="1011.7" y="1989" width="2.9" height="15.0" fill="rgb(224,56,47)" rx="2" ry="2" />
<text  x="1014.66" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="581" width="166.4" height="15.0" fill="rgb(244,18,5)" rx="2" ry="2" />
<text  x="24.89" y="591.5" >[unknown]</text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (66 samples, 16.62%)</title><rect x="886.8" y="2261" width="196.2" height="15.0" fill="rgb(238,138,50)" rx="2" ry="2" />
<text  x="889.83" y="2271.5" >std::shared_ptr&lt;std::__fu..</text>
</g>
<g >
<title>__memcg_kmem_charge_page (2 samples, 0.50%)</title><rect x="399.4" y="2245" width="5.9" height="15.0" fill="rgb(209,210,45)" rx="2" ry="2" />
<text  x="402.37" y="2255.5" ></text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.25%)</title><rect x="381.5" y="2229" width="3.0" height="15.0" fill="rgb(241,159,53)" rx="2" ry="2" />
<text  x="384.54" y="2239.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="601.5" y="2117" width="3.0" height="15.0" fill="rgb(228,57,12)" rx="2" ry="2" />
<text  x="604.49" y="2127.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.50%)</title><rect x="238.9" y="2261" width="5.9" height="15.0" fill="rgb(247,178,18)" rx="2" ry="2" />
<text  x="241.87" y="2271.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; &gt;::destroy&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;(std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;&amp;, std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;*) (5 samples, 1.26%)</title><rect x="860.1" y="2229" width="14.8" height="15.0" fill="rgb(231,135,11)" rx="2" ry="2" />
<text  x="863.08" y="2239.5" ></text>
</g>
<g >
<title>should_failslab (1 samples, 0.25%)</title><rect x="681.7" y="2245" width="3.0" height="15.0" fill="rgb(240,104,30)" rx="2" ry="2" />
<text  x="684.74" y="2255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1845" width="166.4" height="15.0" fill="rgb(242,10,25)" rx="2" ry="2" />
<text  x="24.89" y="1855.5" >[unknown]</text>
</g>
<g >
<title>__pthread_once_slow (2 samples, 0.50%)</title><rect x="188.3" y="2389" width="6.0" height="15.0" fill="rgb(231,165,52)" rx="2" ry="2" />
<text  x="191.34" y="2399.5" ></text>
</g>
<g >
<title>user_disable_single_step (1 samples, 0.25%)</title><rect x="687.7" y="2261" width="3.0" height="15.0" fill="rgb(246,113,48)" rx="2" ry="2" />
<text  x="690.68" y="2271.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;)::{lambda()#1}&amp;&amp; std::forward&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;)::{lambda()#1}&gt;(std::remove_reference&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;)::{lambda()#1}&gt;::type&amp;) (1 samples, 0.25%)</title><rect x="898.7" y="2149" width="3.0" height="15.0" fill="rgb(249,216,50)" rx="2" ry="2" />
<text  x="901.72" y="2159.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 2.52%)</title><rect x="1160.3" y="2357" width="29.7" height="15.0" fill="rgb(236,186,7)" rx="2" ry="2" />
<text  x="1163.28" y="2367.5" >do..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2309" width="166.4" height="15.0" fill="rgb(216,10,18)" rx="2" ry="2" />
<text  x="24.89" y="2319.5" >[unknown]</text>
</g>
<g >
<title>__split_vma (3 samples, 0.76%)</title><rect x="24.9" y="277" width="8.9" height="15.0" fill="rgb(213,215,24)" rx="2" ry="2" />
<text  x="27.86" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;::_M_addr() (1 samples, 0.25%)</title><rect x="857.1" y="2213" width="3.0" height="15.0" fill="rgb(207,85,29)" rx="2" ry="2" />
<text  x="860.10" y="2223.5" ></text>
</g>
<g >
<title>perf_event_task (1 samples, 0.25%)</title><rect x="649.0" y="2245" width="3.0" height="15.0" fill="rgb(239,128,25)" rx="2" ry="2" />
<text  x="652.04" y="2255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;2ul, std::function&lt;void (Transaction*)&gt; &gt;::_M_head(std::_Tuple_impl&lt;2ul, std::function&lt;void (Transaction*)&gt; &gt;&amp;) (1 samples, 0.25%)</title><rect x="904.7" y="2085" width="2.9" height="15.0" fill="rgb(222,203,31)" rx="2" ry="2" />
<text  x="907.66" y="2095.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (1 samples, 0.25%)</title><rect x="268.6" y="2277" width="3.0" height="15.0" fill="rgb(226,134,36)" rx="2" ry="2" />
<text  x="271.59" y="2287.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1285" width="166.4" height="15.0" fill="rgb(207,94,53)" rx="2" ry="2" />
<text  x="24.89" y="1295.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (1 samples, 0.25%)</title><rect x="863.0" y="2101" width="3.0" height="15.0" fill="rgb(224,131,52)" rx="2" ry="2" />
<text  x="866.05" y="2111.5" ></text>
</g>
<g >
<title>do_syscall_64 (55 samples, 13.85%)</title><rect x="21.9" y="341" width="163.5" height="15.0" fill="rgb(254,186,22)" rx="2" ry="2" />
<text  x="24.89" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>memcg_kmem_get_cache (2 samples, 0.50%)</title><rect x="307.2" y="2229" width="6.0" height="15.0" fill="rgb(241,15,36)" rx="2" ry="2" />
<text  x="310.23" y="2239.5" ></text>
</g>
<g >
<title>copy_thread_tls (1 samples, 0.25%)</title><rect x="357.8" y="2277" width="2.9" height="15.0" fill="rgb(221,142,46)" rx="2" ry="2" />
<text  x="360.76" y="2287.5" ></text>
</g>
<g >
<title>task_active_pid_ns (1 samples, 0.25%)</title><rect x="684.7" y="2261" width="3.0" height="15.0" fill="rgb(206,92,45)" rx="2" ry="2" />
<text  x="687.71" y="2271.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (1 samples, 0.25%)</title><rect x="72.4" y="213" width="3.0" height="15.0" fill="rgb(244,106,53)" rx="2" ry="2" />
<text  x="75.42" y="223.5" ></text>
</g>
<g >
<title>security_file_mprotect (1 samples, 0.25%)</title><rect x="979.0" y="2037" width="2.9" height="15.0" fill="rgb(216,215,20)" rx="2" ry="2" />
<text  x="981.97" y="2047.5" ></text>
</g>
<g >
<title>copy_thread_tls (1 samples, 0.25%)</title><rect x="357.8" y="2261" width="2.9" height="15.0" fill="rgb(225,97,48)" rx="2" ry="2" />
<text  x="360.76" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1621" width="166.4" height="15.0" fill="rgb(225,112,27)" rx="2" ry="2" />
<text  x="24.89" y="1631.5" >[unknown]</text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.25%)</title><rect x="24.9" y="229" width="2.9" height="15.0" fill="rgb(236,100,36)" rx="2" ry="2" />
<text  x="27.86" y="239.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; std::make_shared&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (66 samples, 16.62%)</title><rect x="886.8" y="2293" width="196.2" height="15.0" fill="rgb(225,227,49)" rx="2" ry="2" />
<text  x="889.83" y="2303.5" >std::shared_ptr&lt;std::__fu..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="773" width="166.4" height="15.0" fill="rgb(205,157,51)" rx="2" ry="2" />
<text  x="24.89" y="783.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1477" width="166.4" height="15.0" fill="rgb(254,150,30)" rx="2" ry="2" />
<text  x="24.89" y="1487.5" >[unknown]</text>
</g>
<g >
<title>memcg_kmem_get_cache (2 samples, 0.50%)</title><rect x="967.1" y="1957" width="5.9" height="15.0" fill="rgb(243,42,30)" rx="2" ry="2" />
<text  x="970.08" y="1967.5" ></text>
</g>
<g >
<title>lru_cache_add (4 samples, 1.01%)</title><rect x="1038.4" y="1989" width="11.9" height="15.0" fill="rgb(231,4,9)" rx="2" ry="2" />
<text  x="1041.41" y="1999.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (6 samples, 1.51%)</title><rect x="218.1" y="2261" width="17.8" height="15.0" fill="rgb(220,143,7)" rx="2" ry="2" />
<text  x="221.06" y="2271.5" ></text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.25%)</title><rect x="24.9" y="213" width="2.9" height="15.0" fill="rgb(247,174,45)" rx="2" ry="2" />
<text  x="27.86" y="223.5" ></text>
</g>
<g >
<title>cgroup_post_fork (4 samples, 1.01%)</title><rect x="325.1" y="2261" width="11.9" height="15.0" fill="rgb(223,149,3)" rx="2" ry="2" />
<text  x="328.06" y="2271.5" ></text>
</g>
<g >
<title>clear_page_erms (14 samples, 3.53%)</title><rect x="494.5" y="2181" width="41.6" height="15.0" fill="rgb(238,180,26)" rx="2" ry="2" />
<text  x="497.48" y="2191.5" >cle..</text>
</g>
<g >
<title>std::__future_base::_Result&lt;int&gt;::_Result() (1 samples, 0.25%)</title><rect x="901.7" y="2149" width="3.0" height="15.0" fill="rgb(232,59,25)" rx="2" ry="2" />
<text  x="904.69" y="2159.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1429" width="166.4" height="15.0" fill="rgb(247,178,38)" rx="2" ry="2" />
<text  x="24.89" y="1439.5" >[unknown]</text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.25%)</title><rect x="601.5" y="2149" width="3.0" height="15.0" fill="rgb(223,175,26)" rx="2" ry="2" />
<text  x="604.49" y="2159.5" ></text>
</g>
<g >
<title>get_futex_key (1 samples, 0.25%)</title><rect x="1133.5" y="2277" width="3.0" height="15.0" fill="rgb(254,179,52)" rx="2" ry="2" />
<text  x="1136.53" y="2287.5" ></text>
</g>
<g >
<title>do_anonymous_page (9 samples, 2.27%)</title><rect x="218.1" y="2293" width="26.7" height="15.0" fill="rgb(209,42,23)" rx="2" ry="2" />
<text  x="221.06" y="2303.5" >d..</text>
</g>
<g >
<title>do_futex (7 samples, 1.76%)</title><rect x="1115.7" y="2325" width="20.8" height="15.0" fill="rgb(211,117,42)" rx="2" ry="2" />
<text  x="1118.69" y="2335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt;() (1 samples, 0.25%)</title><rect x="895.7" y="2117" width="3.0" height="15.0" fill="rgb(252,225,12)" rx="2" ry="2" />
<text  x="898.74" y="2127.5" ></text>
</g>
<g >
<title>WriteOnlyConflicting(TransactionManager*) (98 samples, 24.69%)</title><rect x="821.4" y="2373" width="291.3" height="15.0" fill="rgb(239,32,42)" rx="2" ry="2" />
<text  x="824.44" y="2383.5" >WriteOnlyConflicting(TransactionManager*)</text>
</g>
<g >
<title>kmem_cache_alloc_node (1 samples, 0.25%)</title><rect x="458.8" y="2213" width="3.0" height="15.0" fill="rgb(253,127,16)" rx="2" ry="2" />
<text  x="461.82" y="2223.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="337.0" y="2245" width="2.9" height="15.0" fill="rgb(234,205,0)" rx="2" ry="2" />
<text  x="339.95" y="2255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="405" width="166.4" height="15.0" fill="rgb(219,188,54)" rx="2" ry="2" />
<text  x="24.89" y="415.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="597" width="166.4" height="15.0" fill="rgb(235,97,51)" rx="2" ry="2" />
<text  x="24.89" y="607.5" >[unknown]</text>
</g>
<g >
<title>pte_alloc_one (2 samples, 0.50%)</title><rect x="1020.6" y="1989" width="5.9" height="15.0" fill="rgb(207,113,33)" rx="2" ry="2" />
<text  x="1023.58" y="1999.5" ></text>
</g>
<g >
<title>vma_gap_callbacks_rotate (1 samples, 0.25%)</title><rect x="958.2" y="1925" width="2.9" height="15.0" fill="rgb(232,130,14)" rx="2" ry="2" />
<text  x="961.16" y="1935.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (10 samples, 2.52%)</title><rect x="845.2" y="2261" width="29.7" height="15.0" fill="rgb(244,208,9)" rx="2" ry="2" />
<text  x="848.21" y="2271.5" >st..</text>
</g>
<g >
<title>smp_call_function_single (3 samples, 0.76%)</title><rect x="93.2" y="149" width="8.9" height="15.0" fill="rgb(220,182,14)" rx="2" ry="2" />
<text  x="96.22" y="159.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (3 samples, 0.76%)</title><rect x="964.1" y="1973" width="8.9" height="15.0" fill="rgb(220,110,3)" rx="2" ry="2" />
<text  x="967.11" y="1983.5" ></text>
</g>
<g >
<title>khugepaged_enter_vma_merge (1 samples, 0.25%)</title><rect x="1160.3" y="2261" width="2.9" height="15.0" fill="rgb(231,163,25)" rx="2" ry="2" />
<text  x="1163.28" y="2271.5" ></text>
</g>
<g >
<title>unmap_vmas (15 samples, 3.78%)</title><rect x="131.9" y="261" width="44.5" height="15.0" fill="rgb(220,101,29)" rx="2" ry="2" />
<text  x="134.86" y="271.5" >unma..</text>
</g>
<g >
<title>- (55 samples, 13.85%)</title><rect x="21.9" y="373" width="163.5" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="24.89" y="383.5" >-</text>
</g>
<g >
<title>kmem_cache_alloc_node_trace (2 samples, 0.50%)</title><rect x="467.7" y="2229" width="6.0" height="15.0" fill="rgb(254,215,28)" rx="2" ry="2" />
<text  x="470.73" y="2239.5" ></text>
</g>
<g >
<title>put_pid.part.0 (1 samples, 0.25%)</title><rect x="693.6" y="2261" width="3.0" height="15.0" fill="rgb(240,75,38)" rx="2" ry="2" />
<text  x="696.63" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="805" width="166.4" height="15.0" fill="rgb(219,48,0)" rx="2" ry="2" />
<text  x="24.89" y="815.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1093" width="166.4" height="15.0" fill="rgb(225,59,13)" rx="2" ry="2" />
<text  x="24.89" y="1103.5" >[unknown]</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 2.52%)</title><rect x="1160.3" y="2373" width="29.7" height="15.0" fill="rgb(215,194,42)" rx="2" ry="2" />
<text  x="1163.28" y="2383.5" >en..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.76%)</title><rect x="1041.4" y="1957" width="8.9" height="15.0" fill="rgb(235,64,18)" rx="2" ry="2" />
<text  x="1044.39" y="1967.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (38 samples, 9.57%)</title><rect x="696.6" y="2277" width="112.9" height="15.0" fill="rgb(240,208,6)" rx="2" ry="2" />
<text  x="699.60" y="2287.5" >_raw_spin_unl..</text>
</g>
<g >
<title>futex_wait_setup (1 samples, 0.25%)</title><rect x="1133.5" y="2293" width="3.0" height="15.0" fill="rgb(224,24,26)" rx="2" ry="2" />
<text  x="1136.53" y="2303.5" ></text>
</g>
<g >
<title>release_pages (10 samples, 2.52%)</title><rect x="102.1" y="213" width="29.8" height="15.0" fill="rgb(205,37,31)" rx="2" ry="2" />
<text  x="105.14" y="223.5" >re..</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (1 samples, 0.25%)</title><rect x="839.3" y="2309" width="2.9" height="15.0" fill="rgb(248,202,23)" rx="2" ry="2" />
<text  x="842.27" y="2319.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="533" width="166.4" height="15.0" fill="rgb(239,152,16)" rx="2" ry="2" />
<text  x="24.89" y="543.5" >[unknown]</text>
</g>
<g >
<title>map_kernel_range_noflush (1 samples, 0.25%)</title><rect x="562.8" y="2245" width="3.0" height="15.0" fill="rgb(228,28,42)" rx="2" ry="2" />
<text  x="565.85" y="2255.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::future&lt;int&gt;*&gt;(std::future&lt;int&gt;*, std::future&lt;int&gt;*) (1 samples, 0.25%)</title><rect x="1109.7" y="2293" width="3.0" height="15.0" fill="rgb(234,192,12)" rx="2" ry="2" />
<text  x="1112.75" y="2303.5" ></text>
</g>
<g >
<title>std::function&lt;void (Transaction*)&gt; const&amp; std::forward&lt;std::function&lt;void (Transaction*)&gt; const&amp;&gt;(std::remove_reference&lt;std::function&lt;void (Transaction*)&gt; const&amp;&gt;::type&amp;) (1 samples, 0.25%)</title><rect x="1091.9" y="2261" width="3.0" height="15.0" fill="rgb(213,51,2)" rx="2" ry="2" />
<text  x="1094.91" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="869" width="166.4" height="15.0" fill="rgb(248,98,30)" rx="2" ry="2" />
<text  x="24.89" y="879.5" >[unknown]</text>
</g>
<g >
<title>schedule (1 samples, 0.25%)</title><rect x="1130.6" y="2261" width="2.9" height="15.0" fill="rgb(218,47,30)" rx="2" ry="2" />
<text  x="1133.55" y="2271.5" ></text>
</g>
<g >
<title>__pte_alloc (2 samples, 0.50%)</title><rect x="1020.6" y="2005" width="5.9" height="15.0" fill="rgb(214,38,0)" rx="2" ry="2" />
<text  x="1023.58" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1333" width="166.4" height="15.0" fill="rgb(248,53,52)" rx="2" ry="2" />
<text  x="24.89" y="1343.5" >[unknown]</text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.25%)</title><rect x="467.7" y="2197" width="3.0" height="15.0" fill="rgb(229,217,5)" rx="2" ry="2" />
<text  x="470.73" y="2207.5" ></text>
</g>
<g >
<title>__vma_link_rb (1 samples, 0.25%)</title><rect x="24.9" y="245" width="2.9" height="15.0" fill="rgb(232,196,16)" rx="2" ry="2" />
<text  x="27.86" y="255.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="553.9" y="2213" width="3.0" height="15.0" fill="rgb(221,142,41)" rx="2" ry="2" />
<text  x="556.93" y="2223.5" ></text>
</g>
<g >
<title>alloc_slab_page (1 samples, 0.25%)</title><rect x="601.5" y="2181" width="3.0" height="15.0" fill="rgb(208,140,37)" rx="2" ry="2" />
<text  x="604.49" y="2191.5" ></text>
</g>
<g >
<title>__clone (206 samples, 51.89%)</title><rect x="200.2" y="2405" width="612.3" height="15.0" fill="rgb(228,94,39)" rx="2" ry="2" />
<text  x="203.23" y="2415.5" >__clone</text>
</g>
<g >
<title>wake_up_new_task (38 samples, 9.57%)</title><rect x="696.6" y="2293" width="112.9" height="15.0" fill="rgb(231,149,11)" rx="2" ry="2" />
<text  x="699.60" y="2303.5" >wake_up_new_t..</text>
</g>
<g >
<title>cpuset_fork (1 samples, 0.25%)</title><rect x="360.7" y="2277" width="3.0" height="15.0" fill="rgb(232,53,45)" rx="2" ry="2" />
<text  x="363.73" y="2287.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;int&gt;::_Reset::~_Reset() (11 samples, 2.77%)</title><rect x="842.2" y="2325" width="32.7" height="15.0" fill="rgb(251,14,15)" rx="2" ry="2" />
<text  x="845.24" y="2335.5" >st..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1989" width="166.4" height="15.0" fill="rgb(207,102,3)" rx="2" ry="2" />
<text  x="24.89" y="1999.5" >[unknown]</text>
</g>
<g >
<title>find_vmap_area (1 samples, 0.25%)</title><rect x="589.6" y="2245" width="3.0" height="15.0" fill="rgb(207,36,42)" rx="2" ry="2" />
<text  x="592.60" y="2255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;::~new_allocator() (1 samples, 0.25%)</title><rect x="889.8" y="2213" width="3.0" height="15.0" fill="rgb(237,71,24)" rx="2" ry="2" />
<text  x="892.80" y="2223.5" ></text>
</g>
<g >
<title>clear_page_erms (5 samples, 1.26%)</title><rect x="218.1" y="2213" width="14.8" height="15.0" fill="rgb(220,158,16)" rx="2" ry="2" />
<text  x="221.06" y="2223.5" ></text>
</g>
<g >
<title>__tlb_remove_page_size (1 samples, 0.25%)</title><rect x="140.8" y="197" width="3.0" height="15.0" fill="rgb(216,22,33)" rx="2" ry="2" />
<text  x="143.78" y="207.5" ></text>
</g>
<g >
<title>__get_vm_area_node (1 samples, 0.25%)</title><rect x="363.7" y="2245" width="3.0" height="15.0" fill="rgb(231,213,14)" rx="2" ry="2" />
<text  x="366.70" y="2255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2197" width="166.4" height="15.0" fill="rgb(241,30,30)" rx="2" ry="2" />
<text  x="24.89" y="2207.5" >[unknown]</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async() (1 samples, 0.25%)</title><rect x="833.3" y="2293" width="3.0" height="15.0" fill="rgb(248,23,36)" rx="2" ry="2" />
<text  x="836.32" y="2303.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (20 samples, 5.04%)</title><rect x="72.4" y="245" width="59.5" height="15.0" fill="rgb(252,98,43)" rx="2" ry="2" />
<text  x="75.42" y="255.5" >tlb_fl..</text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::__future_base::_State_baseV2*&gt; &gt;, std::is_move_constructible&lt;std::__future_base::_State_baseV2*&gt;, std::is_move_assignable&lt;std::__future_base::_State_baseV2*&gt; &gt;::value, void&gt;::type std::swap&lt;std::__future_base::_State_baseV2*&gt;(std::__future_base::_State_baseV2*&amp;, std::__future_base::_State_baseV2*&amp;) (1 samples, 0.25%)</title><rect x="842.2" y="2277" width="3.0" height="15.0" fill="rgb(211,67,26)" rx="2" ry="2" />
<text  x="845.24" y="2287.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.25%)</title><rect x="339.9" y="2213" width="3.0" height="15.0" fill="rgb(218,50,37)" rx="2" ry="2" />
<text  x="342.92" y="2223.5" ></text>
</g>
<g >
<title>get_page_from_freelist (4 samples, 1.01%)</title><rect x="1026.5" y="1973" width="11.9" height="15.0" fill="rgb(224,201,7)" rx="2" ry="2" />
<text  x="1029.52" y="1983.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 1.01%)</title><rect x="1026.5" y="2005" width="11.9" height="15.0" fill="rgb(248,55,2)" rx="2" ry="2" />
<text  x="1029.52" y="2015.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::construct&lt;std::future&lt;int&gt;, std::future&lt;int&gt; &gt;(std::allocator&lt;std::future&lt;int&gt; &gt;&amp;, std::future&lt;int&gt;*, std::future&lt;int&gt;&amp;&amp;) (3 samples, 0.76%)</title><rect x="1094.9" y="2309" width="8.9" height="15.0" fill="rgb(225,50,25)" rx="2" ry="2" />
<text  x="1097.89" y="2319.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1861" width="166.4" height="15.0" fill="rgb(230,71,31)" rx="2" ry="2" />
<text  x="24.89" y="1871.5" >[unknown]</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get() const (1 samples, 0.25%)</title><rect x="836.3" y="2277" width="3.0" height="15.0" fill="rgb(219,29,13)" rx="2" ry="2" />
<text  x="839.30" y="2287.5" ></text>
</g>
<g >
<title>__sched_fork (1 samples, 0.25%)</title><rect x="655.0" y="2245" width="3.0" height="15.0" fill="rgb(223,102,5)" rx="2" ry="2" />
<text  x="657.99" y="2255.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.50%)</title><rect x="262.6" y="2245" width="6.0" height="15.0" fill="rgb(253,93,1)" rx="2" ry="2" />
<text  x="265.64" y="2255.5" ></text>
</g>
<g >
<title>unmap_region (40 samples, 10.08%)</title><rect x="57.6" y="277" width="118.8" height="15.0" fill="rgb(205,101,42)" rx="2" ry="2" />
<text  x="60.56" y="287.5" >unmap_region</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;::_Tuple_impl() (1 samples, 0.25%)</title><rect x="1068.1" y="2069" width="3.0" height="15.0" fill="rgb(211,45,46)" rx="2" ry="2" />
<text  x="1071.14" y="2079.5" ></text>
</g>
<g >
<title>default_send_IPI_single (1 samples, 0.25%)</title><rect x="90.3" y="85" width="2.9" height="15.0" fill="rgb(254,23,16)" rx="2" ry="2" />
<text  x="93.25" y="95.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.25%)</title><rect x="27.8" y="245" width="3.0" height="15.0" fill="rgb(224,150,13)" rx="2" ry="2" />
<text  x="30.83" y="255.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.25%)</title><rect x="601.5" y="2133" width="3.0" height="15.0" fill="rgb(209,112,34)" rx="2" ry="2" />
<text  x="604.49" y="2143.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (2 samples, 0.50%)</title><rect x="307.2" y="2245" width="6.0" height="15.0" fill="rgb(222,11,4)" rx="2" ry="2" />
<text  x="310.23" y="2255.5" ></text>
</g>
<g >
<title>change_p4d_range (4 samples, 1.01%)</title><rect x="928.4" y="2005" width="11.9" height="15.0" fill="rgb(253,46,23)" rx="2" ry="2" />
<text  x="931.44" y="2015.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (2 samples, 0.50%)</title><rect x="125.9" y="197" width="6.0" height="15.0" fill="rgb(234,190,22)" rx="2" ry="2" />
<text  x="128.92" y="207.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::~__allocated_ptr() (2 samples, 0.50%)</title><rect x="851.2" y="2229" width="5.9" height="15.0" fill="rgb(223,160,30)" rx="2" ry="2" />
<text  x="854.16" y="2239.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.25%)</title><rect x="339.9" y="2229" width="3.0" height="15.0" fill="rgb(223,207,49)" rx="2" ry="2" />
<text  x="342.92" y="2239.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt; &gt;::type&amp; std::get&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;(std::tuple&lt;std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;&amp;) (1 samples, 0.25%)</title><rect x="1062.2" y="2101" width="3.0" height="15.0" fill="rgb(216,49,17)" rx="2" ry="2" />
<text  x="1065.19" y="2111.5" ></text>
</g>
<g >
<title>__vma_link_rb (3 samples, 0.76%)</title><rect x="955.2" y="1973" width="8.9" height="15.0" fill="rgb(240,124,24)" rx="2" ry="2" />
<text  x="958.19" y="1983.5" ></text>
</g>
<g >
<title>__get_vm_area_node (24 samples, 6.05%)</title><rect x="405.3" y="2245" width="71.3" height="15.0" fill="rgb(232,115,51)" rx="2" ry="2" />
<text  x="408.31" y="2255.5" >__get_vm..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1797" width="166.4" height="15.0" fill="rgb(236,87,14)" rx="2" ry="2" />
<text  x="24.89" y="1807.5" >[unknown]</text>
</g>
<g >
<title>std::thread::thread&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;)::{lambda()#1}, , void&gt;(std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::_Async_state_impl(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;)::{lambda()#1}&amp;&amp;) (4 samples, 1.01%)</title><rect x="1059.2" y="2149" width="11.9" height="15.0" fill="rgb(247,76,14)" rx="2" ry="2" />
<text  x="1062.22" y="2159.5" ></text>
</g>
<g >
<title>alloc_pages_current (2 samples, 0.50%)</title><rect x="1020.6" y="1973" width="5.9" height="15.0" fill="rgb(207,205,33)" rx="2" ry="2" />
<text  x="1023.58" y="1983.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.25%)</title><rect x="21.9" y="277" width="3.0" height="15.0" fill="rgb(250,82,5)" rx="2" ry="2" />
<text  x="24.89" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.50%)</title><rect x="1005.7" y="2021" width="6.0" height="15.0" fill="rgb(247,183,36)" rx="2" ry="2" />
<text  x="1008.72" y="2031.5" ></text>
</g>
<g >
<title>mprotect_fixup (1 samples, 0.25%)</title><rect x="946.3" y="2021" width="2.9" height="15.0" fill="rgb(243,155,24)" rx="2" ry="2" />
<text  x="949.27" y="2031.5" ></text>
</g>
<g >
<title>__do_sys_clone (1 samples, 0.25%)</title><rect x="253.7" y="2325" width="3.0" height="15.0" fill="rgb(218,204,23)" rx="2" ry="2" />
<text  x="256.73" y="2335.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 16.12%)</title><rect x="10.0" y="2405" width="190.2" height="15.0" fill="rgb(246,134,38)" rx="2" ry="2" />
<text  x="13.00" y="2415.5" >[unknown]</text>
</g>
<g >
<title>task_rq_lock (1 samples, 0.25%)</title><rect x="339.9" y="2245" width="3.0" height="15.0" fill="rgb(214,31,9)" rx="2" ry="2" />
<text  x="342.92" y="2255.5" ></text>
</g>
<g >
<title>split_vma (9 samples, 2.27%)</title><rect x="949.2" y="2021" width="26.8" height="15.0" fill="rgb(251,223,51)" rx="2" ry="2" />
<text  x="952.24" y="2031.5" >s..</text>
</g>
<g >
<title>std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, void (*)()) (50 samples, 12.59%)</title><rect x="907.6" y="2149" width="148.6" height="15.0" fill="rgb(241,30,10)" rx="2" ry="2" />
<text  x="910.63" y="2159.5" >std::thread::_M_st..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1749" width="166.4" height="15.0" fill="rgb(237,188,29)" rx="2" ry="2" />
<text  x="24.89" y="1759.5" >[unknown]</text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="1083.0" y="2293" width="3.0" height="15.0" fill="rgb(207,51,5)" rx="2" ry="2" />
<text  x="1086.00" y="2303.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="501" width="166.4" height="15.0" fill="rgb(228,154,13)" rx="2" ry="2" />
<text  x="24.89" y="511.5" >[unknown]</text>
</g>
<g >
<title>__do_sys_clone (1 samples, 0.25%)</title><rect x="253.7" y="2341" width="3.0" height="15.0" fill="rgb(232,161,7)" rx="2" ry="2" />
<text  x="256.73" y="2351.5" ></text>
</g>
<g >
<title>__vma_rb_erase (5 samples, 1.26%)</title><rect x="33.8" y="261" width="14.8" height="15.0" fill="rgb(221,225,35)" rx="2" ry="2" />
<text  x="36.78" y="271.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.25%)</title><rect x="1020.6" y="1925" width="3.0" height="15.0" fill="rgb(229,43,28)" rx="2" ry="2" />
<text  x="1023.58" y="1935.5" ></text>
</g>
<g >
<title>do_syscall_64 (23 samples, 5.79%)</title><rect x="913.6" y="2085" width="68.3" height="15.0" fill="rgb(250,179,35)" rx="2" ry="2" />
<text  x="916.58" y="2095.5" >do_sysc..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.76%)</title><rect x="1041.4" y="1941" width="8.9" height="15.0" fill="rgb(222,90,26)" rx="2" ry="2" />
<text  x="1044.39" y="1951.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.25%)</title><rect x="134.8" y="213" width="3.0" height="15.0" fill="rgb(241,61,43)" rx="2" ry="2" />
<text  x="137.84" y="223.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (8 samples, 2.02%)</title><rect x="1112.7" y="2405" width="23.8" height="15.0" fill="rgb(232,59,18)" rx="2" ry="2" />
<text  x="1115.72" y="2415.5" >_..</text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator()(std::__future_base::_Result_base*) const (3 samples, 0.76%)</title><rect x="863.0" y="2133" width="9.0" height="15.0" fill="rgb(245,108,10)" rx="2" ry="2" />
<text  x="866.05" y="2143.5" ></text>
</g>
<g >
<title>free_pgtables (3 samples, 0.76%)</title><rect x="57.6" y="261" width="8.9" height="15.0" fill="rgb(239,191,26)" rx="2" ry="2" />
<text  x="60.56" y="271.5" ></text>
</g>
<g >
<title>pids_can_fork (1 samples, 0.25%)</title><rect x="319.1" y="2245" width="3.0" height="15.0" fill="rgb(222,149,35)" rx="2" ry="2" />
<text  x="322.12" y="2255.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1541" width="166.4" height="15.0" fill="rgb(212,9,19)" rx="2" ry="2" />
<text  x="24.89" y="1551.5" >[unknown]</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_join() (1 samples, 0.25%)</title><rect x="833.3" y="2277" width="3.0" height="15.0" fill="rgb(241,147,3)" rx="2" ry="2" />
<text  x="836.32" y="2287.5" ></text>
</g>
<g >
<title>sched_fork (9 samples, 2.27%)</title><rect x="655.0" y="2277" width="26.7" height="15.0" fill="rgb(218,44,43)" rx="2" ry="2" />
<text  x="657.99" y="2287.5" >s..</text>
</g>
<g >
<title>pmd_page_vaddr (1 samples, 0.25%)</title><rect x="1050.3" y="2005" width="3.0" height="15.0" fill="rgb(219,119,54)" rx="2" ry="2" />
<text  x="1053.30" y="2015.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr() (4 samples, 1.01%)</title><rect x="863.0" y="2149" width="11.9" height="15.0" fill="rgb(235,75,16)" rx="2" ry="2" />
<text  x="866.05" y="2159.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;::tuple&lt;std::thread::_State*, std::default_delete&lt;std::thread::_State&gt;, true&gt;() (1 samples, 0.25%)</title><rect x="1068.1" y="2085" width="3.0" height="15.0" fill="rgb(229,10,47)" rx="2" ry="2" />
<text  x="1071.14" y="2095.5" ></text>
</g>
<g >
<title>generic_exec_single (1 samples, 0.25%)</title><rect x="90.3" y="149" width="2.9" height="15.0" fill="rgb(239,5,33)" rx="2" ry="2" />
<text  x="93.25" y="159.5" ></text>
</g>
<g >
<title>- (2 samples, 0.50%)</title><rect x="1139.5" y="2389" width="5.9" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="1142.47" y="2399.5" ></text>
</g>
<g >
<title>alloc_vmap_area (11 samples, 2.77%)</title><rect x="411.3" y="2213" width="32.7" height="15.0" fill="rgb(218,224,22)" rx="2" ry="2" />
<text  x="414.26" y="2223.5" >al..</text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.25%)</title><rect x="1014.6" y="1973" width="3.0" height="15.0" fill="rgb(221,43,22)" rx="2" ry="2" />
<text  x="1017.63" y="1983.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.50%)</title><rect x="238.9" y="2245" width="5.9" height="15.0" fill="rgb(234,165,53)" rx="2" ry="2" />
<text  x="241.87" y="2255.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (2 samples, 0.50%)</title><rect x="967.1" y="1941" width="5.9" height="15.0" fill="rgb(220,9,25)" rx="2" ry="2" />
<text  x="970.08" y="1951.5" ></text>
</g>
<g >
<title>up_read (1 samples, 0.25%)</title><rect x="247.8" y="2341" width="3.0" height="15.0" fill="rgb(206,207,32)" rx="2" ry="2" />
<text  x="250.78" y="2351.5" ></text>
</g>
<g >
<title>std::operator&amp;(std::memory_order, std::__memory_order_modifier) (1 samples, 0.25%)</title><rect x="830.4" y="2309" width="2.9" height="15.0" fill="rgb(239,71,9)" rx="2" ry="2" />
<text  x="833.35" y="2319.5" ></text>
</g>
<g >
<title>_dl_allocate_tls_init (2 samples, 0.50%)</title><rect x="1145.4" y="2405" width="6.0" height="15.0" fill="rgb(208,216,31)" rx="2" ry="2" />
<text  x="1148.42" y="2415.5" ></text>
</g>
<g >
<title>pmd_page_vaddr (1 samples, 0.25%)</title><rect x="1050.3" y="1989" width="3.0" height="15.0" fill="rgb(225,154,0)" rx="2" ry="2" />
<text  x="1053.30" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1557" width="166.4" height="15.0" fill="rgb(219,129,45)" rx="2" ry="2" />
<text  x="24.89" y="1567.5" >[unknown]</text>
</g>
<g >
<title>std::future&lt;int&gt;&amp; std::vector&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::emplace_back&lt;std::future&lt;int&gt; &gt;(std::future&lt;int&gt;&amp;&amp;) (3 samples, 0.76%)</title><rect x="1094.9" y="2325" width="8.9" height="15.0" fill="rgb(228,67,43)" rx="2" ry="2" />
<text  x="1097.89" y="2335.5" ></text>
</g>
<g >
<title>mprotect_fixup (18 samples, 4.53%)</title><rect x="925.5" y="2037" width="53.5" height="15.0" fill="rgb(223,58,42)" rx="2" ry="2" />
<text  x="928.47" y="2047.5" >mprot..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2005" width="166.4" height="15.0" fill="rgb(237,11,11)" rx="2" ry="2" />
<text  x="24.89" y="2015.5" >[unknown]</text>
</g>
<g >
<title>vma_gap_callbacks_rotate (1 samples, 0.25%)</title><rect x="48.6" y="245" width="3.0" height="15.0" fill="rgb(209,61,43)" rx="2" ry="2" />
<text  x="51.64" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (19 samples, 4.79%)</title><rect x="999.8" y="2085" width="56.4" height="15.0" fill="rgb(238,205,43)" rx="2" ry="2" />
<text  x="1002.77" y="2095.5" >exc_p..</text>
</g>
<g >
<title>vm_stat_account (1 samples, 0.25%)</title><rect x="976.0" y="2005" width="3.0" height="15.0" fill="rgb(254,188,27)" rx="2" ry="2" />
<text  x="978.99" y="2015.5" ></text>
</g>
<g >
<title>void std::call_once&lt;void (std::thread::*)(), std::thread*&gt;(std::once_flag&amp;, void (std::thread::*&amp;&amp;)(), std::thread*&amp;&amp;) (1 samples, 0.25%)</title><rect x="827.4" y="2277" width="3.0" height="15.0" fill="rgb(236,125,42)" rx="2" ry="2" />
<text  x="830.38" y="2287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt;::~vector() (2 samples, 0.50%)</title><rect x="1106.8" y="2341" width="5.9" height="15.0" fill="rgb(223,219,49)" rx="2" ry="2" />
<text  x="1109.78" y="2351.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="885" width="166.4" height="15.0" fill="rgb(244,191,24)" rx="2" ry="2" />
<text  x="24.89" y="895.5" >[unknown]</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr() const (1 samples, 0.25%)</title><rect x="836.3" y="2261" width="3.0" height="15.0" fill="rgb(222,183,5)" rx="2" ry="2" />
<text  x="839.30" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1733" width="166.4" height="15.0" fill="rgb(234,23,19)" rx="2" ry="2" />
<text  x="24.89" y="1743.5" >[unknown]</text>
</g>
<g >
<title>cgroup_can_fork (3 samples, 0.76%)</title><rect x="313.2" y="2277" width="8.9" height="15.0" fill="rgb(244,204,3)" rx="2" ry="2" />
<text  x="316.17" y="2287.5" ></text>
</g>
<g >
<title>vma_link (1 samples, 0.25%)</title><rect x="1163.2" y="2261" width="3.0" height="15.0" fill="rgb(254,42,32)" rx="2" ry="2" />
<text  x="1166.25" y="2271.5" ></text>
</g>
<g >
<title>change_pte_range (3 samples, 0.76%)</title><rect x="931.4" y="1989" width="8.9" height="15.0" fill="rgb(211,132,6)" rx="2" ry="2" />
<text  x="934.41" y="1999.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.25%)</title><rect x="999.8" y="2037" width="2.9" height="15.0" fill="rgb(208,22,34)" rx="2" ry="2" />
<text  x="1002.77" y="2047.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (189 samples, 47.61%)</title><rect x="250.8" y="2373" width="561.7" height="15.0" fill="rgb(233,146,30)" rx="2" ry="2" />
<text  x="253.76" y="2383.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2373" width="166.4" height="15.0" fill="rgb(250,42,27)" rx="2" ry="2" />
<text  x="24.89" y="2383.5" >[unknown]</text>
</g>
<g >
<title>RunAsyncTransactions(TransactionManager*, std::vector&lt;std::function&lt;void (Transaction*)&gt;, std::allocator&lt;std::function&lt;void (Transaction*)&gt; &gt; &gt;, int) (98 samples, 24.69%)</title><rect x="821.4" y="2357" width="291.3" height="15.0" fill="rgb(217,46,20)" rx="2" ry="2" />
<text  x="824.44" y="2367.5" >RunAsyncTransactions(TransactionManager..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1173" width="166.4" height="15.0" fill="rgb(234,31,21)" rx="2" ry="2" />
<text  x="24.89" y="1183.5" >[unknown]</text>
</g>
<g >
<title>kmem_cache_alloc (3 samples, 0.76%)</title><rect x="259.7" y="2261" width="8.9" height="15.0" fill="rgb(220,143,24)" rx="2" ry="2" />
<text  x="262.67" y="2271.5" ></text>
</g>
<g >
<title>proc_fork_connector (1 samples, 0.25%)</title><rect x="652.0" y="2277" width="3.0" height="15.0" fill="rgb(211,58,40)" rx="2" ry="2" />
<text  x="655.02" y="2287.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.25%)</title><rect x="604.5" y="2229" width="2.9" height="15.0" fill="rgb(211,145,25)" rx="2" ry="2" />
<text  x="607.46" y="2239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="677" width="166.4" height="15.0" fill="rgb(230,115,39)" rx="2" ry="2" />
<text  x="24.89" y="687.5" >[unknown]</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;::_M_ptr() (1 samples, 0.25%)</title><rect x="1062.2" y="2117" width="3.0" height="15.0" fill="rgb(207,203,43)" rx="2" ry="2" />
<text  x="1065.19" y="2127.5" ></text>
</g>
<g >
<title>clear_page_erms (5 samples, 1.26%)</title><rect x="218.1" y="2229" width="14.8" height="15.0" fill="rgb(206,128,15)" rx="2" ry="2" />
<text  x="221.06" y="2239.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (7 samples, 1.76%)</title><rect x="660.9" y="2245" width="20.8" height="15.0" fill="rgb(247,2,34)" rx="2" ry="2" />
<text  x="663.93" y="2255.5" ></text>
</g>
<g >
<title>userfaultfd_unmap_prep (1 samples, 0.25%)</title><rect x="176.4" y="277" width="3.0" height="15.0" fill="rgb(222,208,10)" rx="2" ry="2" />
<text  x="179.45" y="287.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (10 samples, 2.52%)</title><rect x="1160.3" y="2325" width="29.7" height="15.0" fill="rgb(250,185,38)" rx="2" ry="2" />
<text  x="1163.28" y="2335.5" >ks..</text>
</g>
<g >
<title>std::call_once&lt;void (std::thread::*)(), std::thread*&gt;(std::once_flag&amp;, void (std::thread::*&amp;&amp;)(), std::thread*&amp;&amp;)::{lambda()#2}::operator()() const (2 samples, 0.50%)</title><rect x="188.3" y="2357" width="6.0" height="15.0" fill="rgb(210,202,32)" rx="2" ry="2" />
<text  x="191.34" y="2367.5" ></text>
</g>
<g >
<title>std::future&lt;std::__invoke_result&lt;std::decay&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;)&gt;::type, std::decay&lt;TransactionManager*&amp;&gt;::type, std::decay&lt;std::function&lt;void (Transaction*)&gt; const&amp;&gt;::type&gt;::type&gt; std::async&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;&gt;(std::launch, int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;) (72 samples, 18.14%)</title><rect x="880.9" y="2325" width="214.0" height="15.0" fill="rgb(208,86,54)" rx="2" ry="2" />
<text  x="883.88" y="2335.5" >std::future&lt;std::__invoke_re..</text>
</g>
<g >
<title>free_pages_and_swap_cache (10 samples, 2.52%)</title><rect x="102.1" y="229" width="29.8" height="15.0" fill="rgb(216,149,10)" rx="2" ry="2" />
<text  x="105.14" y="239.5" >fr..</text>
</g>
<g >
<title>should_failslab (1 samples, 0.25%)</title><rect x="565.8" y="2229" width="3.0" height="15.0" fill="rgb(224,223,21)" rx="2" ry="2" />
<text  x="568.82" y="2239.5" ></text>
</g>
<g >
<title>std::call_once&lt;void (std::thread::*)(), std::thread*&gt;(std::once_flag&amp;, void (std::thread::*&amp;&amp;)(), std::thread*&amp;&amp;)::{lambda()#1}::operator()() const (2 samples, 0.50%)</title><rect x="188.3" y="2341" width="6.0" height="15.0" fill="rgb(238,197,2)" rx="2" ry="2" />
<text  x="191.34" y="2351.5" ></text>
</g>
<g >
<title>main (98 samples, 24.69%)</title><rect x="821.4" y="2389" width="291.3" height="15.0" fill="rgb(222,83,40)" rx="2" ry="2" />
<text  x="824.44" y="2399.5" >main</text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.25%)</title><rect x="378.6" y="2197" width="2.9" height="15.0" fill="rgb(224,73,4)" rx="2" ry="2" />
<text  x="381.56" y="2207.5" ></text>
</g>
<g >
<title>__delayacct_tsk_init (3 samples, 0.76%)</title><rect x="259.7" y="2277" width="8.9" height="15.0" fill="rgb(213,77,37)" rx="2" ry="2" />
<text  x="262.67" y="2287.5" ></text>
</g>
<g >
<title>_flat_send_IPI_mask (1 samples, 0.25%)</title><rect x="90.3" y="37" width="2.9" height="15.0" fill="rgb(207,134,47)" rx="2" ry="2" />
<text  x="93.25" y="47.5" ></text>
</g>
<g >
<title>cfree (2 samples, 0.50%)</title><rect x="851.2" y="2197" width="5.9" height="15.0" fill="rgb(252,114,5)" rx="2" ry="2" />
<text  x="854.16" y="2207.5" ></text>
</g>
<g >
<title>__rb_insert_augmented (2 samples, 0.50%)</title><rect x="955.2" y="1957" width="5.9" height="15.0" fill="rgb(228,102,2)" rx="2" ry="2" />
<text  x="958.19" y="1967.5" ></text>
</g>
<g >
<title>cpu_cgroup_fork (2 samples, 0.50%)</title><rect x="337.0" y="2261" width="5.9" height="15.0" fill="rgb(236,208,33)" rx="2" ry="2" />
<text  x="339.95" y="2271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr() (1 samples, 0.25%)</title><rect x="874.9" y="2309" width="3.0" height="15.0" fill="rgb(206,35,0)" rx="2" ry="2" />
<text  x="877.94" y="2319.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="821" width="166.4" height="15.0" fill="rgb(207,194,53)" rx="2" ry="2" />
<text  x="24.89" y="831.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1877" width="166.4" height="15.0" fill="rgb(250,24,49)" rx="2" ry="2" />
<text  x="24.89" y="1887.5" >[unknown]</text>
</g>
<g >
<title>arch_dup_task_struct (1 samples, 0.25%)</title><rect x="574.7" y="2261" width="3.0" height="15.0" fill="rgb(241,6,52)" rx="2" ry="2" />
<text  x="577.74" y="2271.5" ></text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.25%)</title><rect x="601.5" y="2229" width="3.0" height="15.0" fill="rgb(239,164,0)" rx="2" ry="2" />
<text  x="604.49" y="2239.5" ></text>
</g>
<g >
<title>find_vma (1 samples, 0.25%)</title><rect x="919.5" y="2021" width="3.0" height="15.0" fill="rgb(235,25,14)" rx="2" ry="2" />
<text  x="922.52" y="2031.5" ></text>
</g>
<g >
<title>std::thread::joinable() const (1 samples, 0.25%)</title><rect x="1056.2" y="2133" width="3.0" height="15.0" fill="rgb(232,135,35)" rx="2" ry="2" />
<text  x="1059.25" y="2143.5" ></text>
</g>
<g >
<title>vmacache_find (1 samples, 0.25%)</title><rect x="922.5" y="2005" width="3.0" height="15.0" fill="rgb(225,66,20)" rx="2" ry="2" />
<text  x="925.49" y="2015.5" ></text>
</g>
<g >
<title>__gthread_once(int*, void (*)()) (1 samples, 0.25%)</title><rect x="827.4" y="2261" width="3.0" height="15.0" fill="rgb(229,36,20)" rx="2" ry="2" />
<text  x="830.38" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="981" width="166.4" height="15.0" fill="rgb(222,26,42)" rx="2" ry="2" />
<text  x="24.89" y="991.5" >[unknown]</text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.25%)</title><rect x="27.8" y="213" width="3.0" height="15.0" fill="rgb(231,224,37)" rx="2" ry="2" />
<text  x="30.83" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="235.9" y="2229" width="3.0" height="15.0" fill="rgb(206,164,34)" rx="2" ry="2" />
<text  x="238.89" y="2239.5" ></text>
</g>
<g >
<title>copy_process (2 samples, 0.50%)</title><rect x="351.8" y="2277" width="6.0" height="15.0" fill="rgb(217,124,41)" rx="2" ry="2" />
<text  x="354.81" y="2287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;::_Tuple_impl(std::_Tuple_impl&lt;1ul, TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="904.7" y="2101" width="2.9" height="15.0" fill="rgb(239,81,8)" rx="2" ry="2" />
<text  x="907.66" y="2111.5" ></text>
</g>
<g >
<title>should_failslab (1 samples, 0.25%)</title><rect x="681.7" y="2229" width="3.0" height="15.0" fill="rgb(231,198,46)" rx="2" ry="2" />
<text  x="684.74" y="2239.5" ></text>
</g>
<g >
<title>futex_wake (2 samples, 0.50%)</title><rect x="1139.5" y="2293" width="5.9" height="15.0" fill="rgb(228,198,35)" rx="2" ry="2" />
<text  x="1142.47" y="2303.5" ></text>
</g>
<g >
<title>std::future&lt;int&gt;::~future() (1 samples, 0.25%)</title><rect x="1109.7" y="2277" width="3.0" height="15.0" fill="rgb(221,24,51)" rx="2" ry="2" />
<text  x="1112.75" y="2287.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2101" width="166.4" height="15.0" fill="rgb(254,91,14)" rx="2" ry="2" />
<text  x="24.89" y="2111.5" >[unknown]</text>
</g>
<g >
<title>kmem_cache_alloc_node (1 samples, 0.25%)</title><rect x="458.8" y="2197" width="3.0" height="15.0" fill="rgb(243,159,37)" rx="2" ry="2" />
<text  x="461.82" y="2207.5" ></text>
</g>
<g >
<title>insert_vmap_area_augment.constprop.0 (2 samples, 0.50%)</title><rect x="452.9" y="2213" width="5.9" height="15.0" fill="rgb(235,135,52)" rx="2" ry="2" />
<text  x="455.87" y="2223.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2181" width="166.4" height="15.0" fill="rgb(225,2,9)" rx="2" ry="2" />
<text  x="24.89" y="2191.5" >[unknown]</text>
</g>
<g >
<title>internal_get_user_pages_fast (1 samples, 0.25%)</title><rect x="1133.5" y="2229" width="3.0" height="15.0" fill="rgb(223,59,37)" rx="2" ry="2" />
<text  x="1136.53" y="2239.5" ></text>
</g>
<g >
<title>cgroup_can_fork (2 samples, 0.50%)</title><rect x="313.2" y="2261" width="5.9" height="15.0" fill="rgb(236,75,17)" rx="2" ry="2" />
<text  x="316.17" y="2271.5" ></text>
</g>
<g >
<title>get_page_from_freelist (20 samples, 5.04%)</title><rect x="494.5" y="2213" width="59.4" height="15.0" fill="rgb(213,81,21)" rx="2" ry="2" />
<text  x="497.48" y="2223.5" >get_pa..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;::_M_ptr() (1 samples, 0.25%)</title><rect x="1065.2" y="2085" width="2.9" height="15.0" fill="rgb(216,46,13)" rx="2" ry="2" />
<text  x="1068.16" y="2095.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="232.9" y="2213" width="3.0" height="15.0" fill="rgb(224,62,48)" rx="2" ry="2" />
<text  x="235.92" y="2223.5" ></text>
</g>
<g >
<title>__do_sys_clone (186 samples, 46.85%)</title><rect x="259.7" y="2325" width="552.8" height="15.0" fill="rgb(242,153,3)" rx="2" ry="2" />
<text  x="262.67" y="2335.5" >__do_sys_clone</text>
</g>
<g >
<title>__vmalloc_node_range (55 samples, 13.85%)</title><rect x="405.3" y="2261" width="163.5" height="15.0" fill="rgb(216,40,50)" rx="2" ry="2" />
<text  x="408.31" y="2271.5" >__vmalloc_node_range</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="709" width="166.4" height="15.0" fill="rgb(234,66,13)" rx="2" ry="2" />
<text  x="24.89" y="719.5" >[unknown]</text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.25%)</title><rect x="467.7" y="2213" width="3.0" height="15.0" fill="rgb(205,85,22)" rx="2" ry="2" />
<text  x="470.73" y="2223.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1765" width="166.4" height="15.0" fill="rgb(240,115,8)" rx="2" ry="2" />
<text  x="24.89" y="1775.5" >[unknown]</text>
</g>
<g >
<title>copy_creds (2 samples, 0.50%)</title><rect x="342.9" y="2261" width="5.9" height="15.0" fill="rgb(229,105,7)" rx="2" ry="2" />
<text  x="345.90" y="2271.5" ></text>
</g>
<g >
<title>vmacache_find (1 samples, 0.25%)</title><rect x="922.5" y="2021" width="3.0" height="15.0" fill="rgb(226,221,46)" rx="2" ry="2" />
<text  x="925.49" y="2031.5" ></text>
</g>
<g >
<title>page_counter_try_charge (1 samples, 0.25%)</title><rect x="384.5" y="2213" width="3.0" height="15.0" fill="rgb(243,69,39)" rx="2" ry="2" />
<text  x="387.51" y="2223.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (2 samples, 0.50%)</title><rect x="66.5" y="229" width="5.9" height="15.0" fill="rgb(238,124,4)" rx="2" ry="2" />
<text  x="69.47" y="239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1013" width="166.4" height="15.0" fill="rgb(229,166,46)" rx="2" ry="2" />
<text  x="24.89" y="1023.5" >[unknown]</text>
</g>
<g >
<title>std::__future_base::_Result&lt;int&gt;::_M_destroy() (3 samples, 0.76%)</title><rect x="863.0" y="2117" width="9.0" height="15.0" fill="rgb(228,14,0)" rx="2" ry="2" />
<text  x="866.05" y="2127.5" ></text>
</g>
<g >
<title>put_pid.part.0 (1 samples, 0.25%)</title><rect x="690.7" y="2277" width="2.9" height="15.0" fill="rgb(206,148,53)" rx="2" ry="2" />
<text  x="693.65" y="2287.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_Async_state_commonV2() (1 samples, 0.25%)</title><rect x="895.7" y="2149" width="3.0" height="15.0" fill="rgb(239,154,36)" rx="2" ry="2" />
<text  x="898.74" y="2159.5" ></text>
</g>
<g >
<title>memcpy_erms (6 samples, 1.51%)</title><rect x="607.4" y="2245" width="17.9" height="15.0" fill="rgb(219,86,3)" rx="2" ry="2" />
<text  x="610.43" y="2255.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;::~_Async_state_impl() (5 samples, 1.26%)</title><rect x="860.1" y="2197" width="14.8" height="15.0" fill="rgb(242,200,52)" rx="2" ry="2" />
<text  x="863.08" y="2207.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.25%)</title><rect x="235.9" y="2277" width="3.0" height="15.0" fill="rgb(205,112,11)" rx="2" ry="2" />
<text  x="238.89" y="2287.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (4 samples, 1.01%)</title><rect x="1038.4" y="2005" width="11.9" height="15.0" fill="rgb(249,53,44)" rx="2" ry="2" />
<text  x="1041.41" y="2015.5" ></text>
</g>
<g >
<title>__libc_start_main (98 samples, 24.69%)</title><rect x="821.4" y="2405" width="291.3" height="15.0" fill="rgb(235,43,45)" rx="2" ry="2" />
<text  x="824.44" y="2415.5" >__libc_start_main</text>
</g>
<g >
<title>alloc_pages_vma (6 samples, 1.51%)</title><rect x="218.1" y="2277" width="17.8" height="15.0" fill="rgb(252,54,28)" rx="2" ry="2" />
<text  x="221.06" y="2287.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (1 samples, 0.25%)</title><rect x="188.3" y="2309" width="3.0" height="15.0" fill="rgb(213,181,27)" rx="2" ry="2" />
<text  x="191.34" y="2319.5" ></text>
</g>
<g >
<title>pthread_join (1 samples, 0.25%)</title><rect x="191.3" y="2309" width="3.0" height="15.0" fill="rgb(222,155,14)" rx="2" ry="2" />
<text  x="194.31" y="2319.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::future&lt;int&gt;*, std::vector&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::future&lt;int&gt;*, std::vector&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;std::future&lt;int&gt;*, std::vector&lt;std::future&lt;int&gt;, std::allocator&lt;std::future&lt;int&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.25%)</title><rect x="821.4" y="2341" width="3.0" height="15.0" fill="rgb(211,6,15)" rx="2" ry="2" />
<text  x="824.44" y="2351.5" ></text>
</g>
<g >
<title>__vma_adjust (3 samples, 0.76%)</title><rect x="1166.2" y="2229" width="8.9" height="15.0" fill="rgb(248,1,30)" rx="2" ry="2" />
<text  x="1169.22" y="2239.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (10 samples, 2.52%)</title><rect x="845.2" y="2293" width="29.7" height="15.0" fill="rgb(237,106,43)" rx="2" ry="2" />
<text  x="848.21" y="2303.5" >st..</text>
</g>
<g >
<title>__x64_sys_mprotect (1 samples, 0.25%)</title><rect x="910.6" y="2085" width="3.0" height="15.0" fill="rgb(213,74,13)" rx="2" ry="2" />
<text  x="913.60" y="2095.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.25%)</title><rect x="839.3" y="2293" width="2.9" height="15.0" fill="rgb(252,184,34)" rx="2" ry="2" />
<text  x="842.27" y="2303.5" ></text>
</g>
<g >
<title>cfree (1 samples, 0.25%)</title><rect x="866.0" y="2101" width="3.0" height="15.0" fill="rgb(230,165,46)" rx="2" ry="2" />
<text  x="869.02" y="2111.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="549" width="166.4" height="15.0" fill="rgb(247,44,12)" rx="2" ry="2" />
<text  x="24.89" y="559.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2069" width="166.4" height="15.0" fill="rgb(215,98,44)" rx="2" ry="2" />
<text  x="24.89" y="2079.5" >[unknown]</text>
</g>
<g >
<title>std::future&lt;int&gt;::future(std::future&lt;int&gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="1100.8" y="2293" width="3.0" height="15.0" fill="rgb(214,218,48)" rx="2" ry="2" />
<text  x="1103.83" y="2303.5" ></text>
</g>
<g >
<title>std::future&lt;std::__invoke_result&lt;std::decay&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;)&gt;::type, std::decay&lt;TransactionManager*&amp;&gt;::type, std::decay&lt;std::function&lt;void (Transaction*)&gt; const&amp;&gt;::type&gt;::type&gt; std::async&lt;int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;&gt;(int (&amp;)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*&amp;, std::function&lt;void (Transaction*)&gt; const&amp;) (73 samples, 18.39%)</title><rect x="877.9" y="2341" width="217.0" height="15.0" fill="rgb(231,131,29)" rx="2" ry="2" />
<text  x="880.91" y="2351.5" >std::future&lt;std::__invoke_re..</text>
</g>
<g >
<title>apparmor_file_mprotect (2 samples, 0.50%)</title><rect x="913.6" y="2021" width="5.9" height="15.0" fill="rgb(230,153,41)" rx="2" ry="2" />
<text  x="916.58" y="2031.5" ></text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.25%)</title><rect x="1163.2" y="2229" width="3.0" height="15.0" fill="rgb(234,91,12)" rx="2" ry="2" />
<text  x="1166.25" y="2239.5" ></text>
</g>
<g >
<title>__vma_adjust (2 samples, 0.50%)</title><rect x="949.2" y="1973" width="6.0" height="15.0" fill="rgb(238,1,48)" rx="2" ry="2" />
<text  x="952.24" y="1983.5" ></text>
</g>
<g >
<title>vm_area_dup (1 samples, 0.25%)</title><rect x="973.0" y="1973" width="3.0" height="15.0" fill="rgb(248,195,32)" rx="2" ry="2" />
<text  x="976.02" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="949" width="166.4" height="15.0" fill="rgb(219,45,46)" rx="2" ry="2" />
<text  x="24.89" y="959.5" >[unknown]</text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.25%)</title><rect x="128.9" y="133" width="3.0" height="15.0" fill="rgb(216,69,47)" rx="2" ry="2" />
<text  x="131.89" y="143.5" ></text>
</g>
<g >
<title>vm_area_dup (4 samples, 1.01%)</title><rect x="964.1" y="1989" width="11.9" height="15.0" fill="rgb(208,37,51)" rx="2" ry="2" />
<text  x="967.11" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2117" width="166.4" height="15.0" fill="rgb(252,181,38)" rx="2" ry="2" />
<text  x="24.89" y="2127.5" >[unknown]</text>
</g>
<g >
<title>khugepaged_enter_vma_merge (1 samples, 0.25%)</title><rect x="943.3" y="2021" width="3.0" height="15.0" fill="rgb(226,199,52)" rx="2" ry="2" />
<text  x="946.30" y="2031.5" ></text>
</g>
<g >
<title>_cond_resched (2 samples, 0.50%)</title><rect x="568.8" y="2261" width="5.9" height="15.0" fill="rgb(245,27,13)" rx="2" ry="2" />
<text  x="571.79" y="2271.5" ></text>
</g>
<g >
<title>std::future&lt;int&gt;&amp;&amp; std::forward&lt;std::future&lt;int&gt; &gt;(std::remove_reference&lt;std::future&lt;int&gt; &gt;::type&amp;) (1 samples, 0.25%)</title><rect x="1097.9" y="2293" width="2.9" height="15.0" fill="rgb(231,184,15)" rx="2" ry="2" />
<text  x="1100.86" y="2303.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;int&gt;::_M_value() (1 samples, 0.25%)</title><rect x="874.9" y="2325" width="3.0" height="15.0" fill="rgb(238,36,31)" rx="2" ry="2" />
<text  x="877.94" y="2335.5" ></text>
</g>
<g >
<title>can_vma_merge_before.part.0 (1 samples, 0.25%)</title><rect x="1175.1" y="2245" width="3.0" height="15.0" fill="rgb(228,71,27)" rx="2" ry="2" />
<text  x="1178.14" y="2255.5" ></text>
</g>
<g >
<title>finish_task_switch (3 samples, 0.76%)</title><rect x="1121.6" y="2229" width="9.0" height="15.0" fill="rgb(252,12,12)" rx="2" ry="2" />
<text  x="1124.64" y="2239.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="997" width="166.4" height="15.0" fill="rgb(214,115,28)" rx="2" ry="2" />
<text  x="24.89" y="1007.5" >[unknown]</text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.25%)</title><rect x="586.6" y="2245" width="3.0" height="15.0" fill="rgb(253,223,50)" rx="2" ry="2" />
<text  x="589.62" y="2255.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.25%)</title><rect x="131.9" y="229" width="2.9" height="15.0" fill="rgb(237,70,43)" rx="2" ry="2" />
<text  x="134.86" y="239.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base*&amp; std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;(std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;&amp;) (1 samples, 0.25%)</title><rect x="872.0" y="2117" width="2.9" height="15.0" fill="rgb(254,40,23)" rx="2" ry="2" />
<text  x="874.96" y="2127.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait() (2 samples, 0.50%)</title><rect x="833.3" y="2309" width="6.0" height="15.0" fill="rgb(245,206,8)" rx="2" ry="2" />
<text  x="836.32" y="2319.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1221" width="166.4" height="15.0" fill="rgb(242,85,39)" rx="2" ry="2" />
<text  x="24.89" y="1231.5" >[unknown]</text>
</g>
<g >
<title>__do_munmap (54 samples, 13.60%)</title><rect x="21.9" y="293" width="160.5" height="15.0" fill="rgb(234,121,23)" rx="2" ry="2" />
<text  x="24.89" y="303.5" >__do_munmap</text>
</g>
<g >
<title>put_pid.part.0 (1 samples, 0.25%)</title><rect x="690.7" y="2293" width="2.9" height="15.0" fill="rgb(253,112,13)" rx="2" ry="2" />
<text  x="693.65" y="2303.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.25%)</title><rect x="122.9" y="181" width="3.0" height="15.0" fill="rgb(229,166,7)" rx="2" ry="2" />
<text  x="125.95" y="191.5" ></text>
</g>
<g >
<title>vm_area_dup (1 samples, 0.25%)</title><rect x="30.8" y="245" width="3.0" height="15.0" fill="rgb(210,74,39)" rx="2" ry="2" />
<text  x="33.81" y="255.5" ></text>
</g>
<g >
<title>pthread_create@@GLIBC_2.2.5 (25 samples, 6.30%)</title><rect x="981.9" y="2133" width="74.3" height="15.0" fill="rgb(228,12,40)" rx="2" ry="2" />
<text  x="984.94" y="2143.5" >pthread_..</text>
</g>
<g >
<title>_pthread_cleanup_pop (1 samples, 0.25%)</title><rect x="1154.3" y="2405" width="3.0" height="15.0" fill="rgb(244,10,14)" rx="2" ry="2" />
<text  x="1157.33" y="2415.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="661" width="166.4" height="15.0" fill="rgb(249,122,16)" rx="2" ry="2" />
<text  x="24.89" y="671.5" >[unknown]</text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="1035.4" y="1941" width="3.0" height="15.0" fill="rgb(238,176,18)" rx="2" ry="2" />
<text  x="1038.44" y="1951.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.50%)</title><rect x="1139.5" y="2373" width="5.9" height="15.0" fill="rgb(222,188,1)" rx="2" ry="2" />
<text  x="1142.47" y="2383.5" ></text>
</g>
<g >
<title>page_remove_rmap (1 samples, 0.25%)</title><rect x="143.8" y="181" width="2.9" height="15.0" fill="rgb(216,105,38)" rx="2" ry="2" />
<text  x="146.75" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (1 samples, 0.25%)</title><rect x="910.6" y="2069" width="3.0" height="15.0" fill="rgb(215,63,31)" rx="2" ry="2" />
<text  x="913.60" y="2079.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;int&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl(std::__future_base::_Result&lt;int&gt;*) (1 samples, 0.25%)</title><rect x="1074.1" y="2133" width="3.0" height="15.0" fill="rgb(241,149,1)" rx="2" ry="2" />
<text  x="1077.08" y="2143.5" ></text>
</g>
<g >
<title>mmap_region (6 samples, 1.51%)</title><rect x="1160.3" y="2277" width="17.8" height="15.0" fill="rgb(235,226,2)" rx="2" ry="2" />
<text  x="1163.28" y="2287.5" ></text>
</g>
<g >
<title>rmqueue (4 samples, 1.01%)</title><rect x="542.0" y="2197" width="11.9" height="15.0" fill="rgb(210,160,50)" rx="2" ry="2" />
<text  x="545.04" y="2207.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.50%)</title><rect x="1014.6" y="1989" width="6.0" height="15.0" fill="rgb(244,187,17)" rx="2" ry="2" />
<text  x="1017.63" y="1999.5" ></text>
</g>
<g >
<title>lru_add_drain (2 samples, 0.50%)</title><rect x="66.5" y="261" width="5.9" height="15.0" fill="rgb(229,88,28)" rx="2" ry="2" />
<text  x="69.47" y="271.5" ></text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async() (1 samples, 0.25%)</title><rect x="827.4" y="2309" width="3.0" height="15.0" fill="rgb(210,36,46)" rx="2" ry="2" />
<text  x="830.38" y="2319.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.25%)</title><rect x="833.3" y="2245" width="3.0" height="15.0" fill="rgb(228,188,48)" rx="2" ry="2" />
<text  x="836.32" y="2255.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.25%)</title><rect x="646.1" y="2261" width="2.9" height="15.0" fill="rgb(223,208,38)" rx="2" ry="2" />
<text  x="649.07" y="2271.5" ></text>
</g>
<g >
<title>find_vma (2 samples, 0.50%)</title><rect x="919.5" y="2037" width="6.0" height="15.0" fill="rgb(246,216,9)" rx="2" ry="2" />
<text  x="922.52" y="2047.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (2 samples, 0.50%)</title><rect x="75.4" y="197" width="5.9" height="15.0" fill="rgb(249,209,50)" rx="2" ry="2" />
<text  x="78.39" y="207.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="837" width="166.4" height="15.0" fill="rgb(244,162,50)" rx="2" ry="2" />
<text  x="24.89" y="847.5" >[unknown]</text>
</g>
<g >
<title>std::thread::operator=(std::thread&amp;&amp;) (1 samples, 0.25%)</title><rect x="1056.2" y="2149" width="3.0" height="15.0" fill="rgb(228,61,7)" rx="2" ry="2" />
<text  x="1059.25" y="2159.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.25%)</title><rect x="556.9" y="2229" width="3.0" height="15.0" fill="rgb(246,38,39)" rx="2" ry="2" />
<text  x="559.90" y="2239.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.25%)</title><rect x="461.8" y="2213" width="3.0" height="15.0" fill="rgb(207,102,4)" rx="2" ry="2" />
<text  x="464.79" y="2223.5" ></text>
</g>
<g >
<title>handle_mm_fault (17 samples, 4.28%)</title><rect x="1005.7" y="2053" width="50.5" height="15.0" fill="rgb(224,33,53)" rx="2" ry="2" />
<text  x="1008.72" y="2063.5" >handl..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2133" width="166.4" height="15.0" fill="rgb(249,63,7)" rx="2" ry="2" />
<text  x="24.89" y="2143.5" >[unknown]</text>
</g>
<g >
<title>pmd_page_vaddr (1 samples, 0.25%)</title><rect x="244.8" y="2293" width="3.0" height="15.0" fill="rgb(244,175,26)" rx="2" ry="2" />
<text  x="247.81" y="2303.5" ></text>
</g>
<g >
<title>insert_vmap_area.constprop.0 (3 samples, 0.76%)</title><rect x="444.0" y="2213" width="8.9" height="15.0" fill="rgb(226,68,40)" rx="2" ry="2" />
<text  x="446.95" y="2223.5" ></text>
</g>
<g >
<title>copy_creds (2 samples, 0.50%)</title><rect x="342.9" y="2277" width="5.9" height="15.0" fill="rgb(218,54,41)" rx="2" ry="2" />
<text  x="345.90" y="2287.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (1 samples, 0.25%)</title><rect x="75.4" y="165" width="3.0" height="15.0" fill="rgb(241,150,12)" rx="2" ry="2" />
<text  x="78.39" y="175.5" ></text>
</g>
<g >
<title>__vm_munmap (54 samples, 13.60%)</title><rect x="21.9" y="309" width="160.5" height="15.0" fill="rgb(247,93,2)" rx="2" ry="2" />
<text  x="24.89" y="319.5" >__vm_munmap</text>
</g>
<g >
<title>change_protection (1 samples, 0.25%)</title><rect x="940.3" y="2005" width="3.0" height="15.0" fill="rgb(206,204,36)" rx="2" ry="2" />
<text  x="943.33" y="2015.5" ></text>
</g>
<g >
<title>rmqueue (1 samples, 0.25%)</title><rect x="601.5" y="2101" width="3.0" height="15.0" fill="rgb(244,169,54)" rx="2" ry="2" />
<text  x="604.49" y="2111.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1397" width="166.4" height="15.0" fill="rgb(219,108,22)" rx="2" ry="2" />
<text  x="24.89" y="1407.5" >[unknown]</text>
</g>
<g >
<title>zap_pte_range.isra.0 (10 samples, 2.52%)</title><rect x="146.7" y="197" width="29.7" height="15.0" fill="rgb(237,39,33)" rx="2" ry="2" />
<text  x="149.73" y="207.5" >za..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1669" width="166.4" height="15.0" fill="rgb(247,220,33)" rx="2" ry="2" />
<text  x="24.89" y="1679.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1061" width="166.4" height="15.0" fill="rgb(240,76,9)" rx="2" ry="2" />
<text  x="24.89" y="1071.5" >[unknown]</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (7 samples, 1.76%)</title><rect x="102.1" y="197" width="20.8" height="15.0" fill="rgb(226,117,5)" rx="2" ry="2" />
<text  x="105.14" y="207.5" ></text>
</g>
<g >
<title>simulator (397 samples, 100.00%)</title><rect x="10.0" y="2421" width="1180.0" height="15.0" fill="rgb(233,189,31)" rx="2" ry="2" />
<text  x="13.00" y="2431.5" >simulator</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="337.0" y="2229" width="2.9" height="15.0" fill="rgb(219,62,27)" rx="2" ry="2" />
<text  x="339.95" y="2239.5" ></text>
</g>
<g >
<title>security_file_mprotect (1 samples, 0.25%)</title><rect x="979.0" y="2053" width="2.9" height="15.0" fill="rgb(231,54,9)" rx="2" ry="2" />
<text  x="981.97" y="2063.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (26 samples, 6.55%)</title><rect x="479.6" y="2229" width="77.3" height="15.0" fill="rgb(209,180,48)" rx="2" ry="2" />
<text  x="482.62" y="2239.5" >__alloc_..</text>
</g>
<g >
<title>page_counter_try_charge (5 samples, 1.26%)</title><rect x="366.7" y="2229" width="14.8" height="15.0" fill="rgb(208,54,53)" rx="2" ry="2" />
<text  x="369.68" y="2239.5" ></text>
</g>
<g >
<title>find_vma (1 samples, 0.25%)</title><rect x="51.6" y="277" width="3.0" height="15.0" fill="rgb(229,3,17)" rx="2" ry="2" />
<text  x="54.61" y="287.5" ></text>
</g>
<g >
<title>flat_send_IPI_mask (1 samples, 0.25%)</title><rect x="90.3" y="69" width="2.9" height="15.0" fill="rgb(238,129,11)" rx="2" ry="2" />
<text  x="93.25" y="79.5" ></text>
</g>
<g >
<title>find_vma (1 samples, 0.25%)</title><rect x="51.6" y="261" width="3.0" height="15.0" fill="rgb(210,127,21)" rx="2" ry="2" />
<text  x="54.61" y="271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2085" width="166.4" height="15.0" fill="rgb(243,24,8)" rx="2" ry="2" />
<text  x="24.89" y="2095.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1077" width="166.4" height="15.0" fill="rgb(210,175,14)" rx="2" ry="2" />
<text  x="24.89" y="1087.5" >[unknown]</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.76%)</title><rect x="592.6" y="2245" width="8.9" height="15.0" fill="rgb(221,154,12)" rx="2" ry="2" />
<text  x="595.57" y="2255.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::future&lt;int&gt;*, std::future&lt;int&gt; &gt;(std::future&lt;int&gt;*, std::future&lt;int&gt;*, std::allocator&lt;std::future&lt;int&gt; &gt;&amp;) (1 samples, 0.25%)</title><rect x="1109.7" y="2325" width="3.0" height="15.0" fill="rgb(238,58,39)" rx="2" ry="2" />
<text  x="1112.75" y="2335.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="965" width="166.4" height="15.0" fill="rgb(218,25,13)" rx="2" ry="2" />
<text  x="24.89" y="975.5" >[unknown]</text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (66 samples, 16.62%)</title><rect x="886.8" y="2245" width="196.2" height="15.0" fill="rgb(218,70,26)" rx="2" ry="2" />
<text  x="889.83" y="2255.5" >std::__shared_ptr&lt;std::__..</text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.25%)</title><rect x="964.1" y="1957" width="3.0" height="15.0" fill="rgb(246,206,32)" rx="2" ry="2" />
<text  x="967.11" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1381" width="166.4" height="15.0" fill="rgb(208,2,25)" rx="2" ry="2" />
<text  x="24.89" y="1391.5" >[unknown]</text>
</g>
<g >
<title>std::future&lt;int&gt;::get() (15 samples, 3.78%)</title><rect x="833.3" y="2341" width="44.6" height="15.0" fill="rgb(236,171,0)" rx="2" ry="2" />
<text  x="836.32" y="2351.5" >std:..</text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.25%)</title><rect x="1020.6" y="1909" width="3.0" height="15.0" fill="rgb(229,160,42)" rx="2" ry="2" />
<text  x="1023.58" y="1919.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.25%)</title><rect x="925.5" y="2021" width="2.9" height="15.0" fill="rgb(220,34,44)" rx="2" ry="2" />
<text  x="928.47" y="2031.5" ></text>
</g>
<g >
<title>pmd_pfn (1 samples, 0.25%)</title><rect x="1053.3" y="2021" width="2.9" height="15.0" fill="rgb(234,70,37)" rx="2" ry="2" />
<text  x="1056.27" y="2031.5" ></text>
</g>
<g >
<title>vma_gap_callbacks_rotate (1 samples, 0.25%)</title><rect x="48.6" y="261" width="3.0" height="15.0" fill="rgb(248,15,36)" rx="2" ry="2" />
<text  x="51.64" y="271.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1 samples, 0.25%)</title><rect x="54.6" y="277" width="3.0" height="15.0" fill="rgb(243,51,25)" rx="2" ry="2" />
<text  x="57.58" y="287.5" ></text>
</g>
<g >
<title>lsm_task_alloc (1 samples, 0.25%)</title><rect x="681.7" y="2261" width="3.0" height="15.0" fill="rgb(236,198,14)" rx="2" ry="2" />
<text  x="684.74" y="2271.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.25%)</title><rect x="473.7" y="2229" width="2.9" height="15.0" fill="rgb(231,221,49)" rx="2" ry="2" />
<text  x="476.68" y="2239.5" ></text>
</g>
<g >
<title>__libc_malloc (2 samples, 0.50%)</title><rect x="815.5" y="2405" width="5.9" height="15.0" fill="rgb(242,177,37)" rx="2" ry="2" />
<text  x="818.49" y="2415.5" ></text>
</g>
<g >
<title>calloc (2 samples, 0.50%)</title><rect x="194.3" y="2389" width="5.9" height="15.0" fill="rgb(227,205,24)" rx="2" ry="2" />
<text  x="197.28" y="2399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;int&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt;(std::__future_base::_Result&lt;int&gt;*) (1 samples, 0.25%)</title><rect x="1074.1" y="2149" width="3.0" height="15.0" fill="rgb(238,168,10)" rx="2" ry="2" />
<text  x="1077.08" y="2159.5" ></text>
</g>
<g >
<title>unmap_single_vma (15 samples, 3.78%)</title><rect x="131.9" y="245" width="44.5" height="15.0" fill="rgb(235,131,8)" rx="2" ry="2" />
<text  x="134.86" y="255.5" >unma..</text>
</g>
<g >
<title>smp_call_function_single (1 samples, 0.25%)</title><rect x="78.4" y="149" width="2.9" height="15.0" fill="rgb(205,36,32)" rx="2" ry="2" />
<text  x="81.36" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.25%)</title><rect x="134.8" y="197" width="3.0" height="15.0" fill="rgb(244,188,49)" rx="2" ry="2" />
<text  x="137.84" y="207.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.25%)</title><rect x="1023.6" y="1925" width="2.9" height="15.0" fill="rgb(251,126,46)" rx="2" ry="2" />
<text  x="1026.55" y="1935.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.25%)</title><rect x="1017.6" y="1957" width="3.0" height="15.0" fill="rgb(220,72,22)" rx="2" ry="2" />
<text  x="1020.61" y="1967.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt; &gt;(std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (62 samples, 15.62%)</title><rect x="892.8" y="2213" width="184.3" height="15.0" fill="rgb(218,48,18)" rx="2" ry="2" />
<text  x="895.77" y="2223.5" >std::_Sp_counted_ptr_inp..</text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.25%)</title><rect x="574.7" y="2229" width="3.0" height="15.0" fill="rgb(213,181,54)" rx="2" ry="2" />
<text  x="577.74" y="2239.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (9 samples, 2.27%)</title><rect x="75.4" y="213" width="26.7" height="15.0" fill="rgb(213,208,30)" rx="2" ry="2" />
<text  x="78.39" y="223.5" >n..</text>
</g>
<g >
<title>pmd_pfn (1 samples, 0.25%)</title><rect x="1053.3" y="2005" width="2.9" height="15.0" fill="rgb(233,16,53)" rx="2" ry="2" />
<text  x="1056.27" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1781" width="166.4" height="15.0" fill="rgb(224,157,8)" rx="2" ry="2" />
<text  x="24.89" y="1791.5" >[unknown]</text>
</g>
<g >
<title>- (24 samples, 6.05%)</title><rect x="910.6" y="2117" width="71.3" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="913.60" y="2127.5" >-</text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::get() (1 samples, 0.25%)</title><rect x="1077.1" y="2213" width="2.9" height="15.0" fill="rgb(248,167,40)" rx="2" ry="2" />
<text  x="1080.05" y="2223.5" ></text>
</g>
<g >
<title>__vma_rb_erase (6 samples, 1.51%)</title><rect x="33.8" y="277" width="17.8" height="15.0" fill="rgb(225,211,41)" rx="2" ry="2" />
<text  x="36.78" y="287.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.25%)</title><rect x="473.7" y="2213" width="2.9" height="15.0" fill="rgb(223,68,21)" rx="2" ry="2" />
<text  x="476.68" y="2223.5" ></text>
</g>
<g >
<title>free_vmap_area_rb_augment_cb_rotate (1 samples, 0.25%)</title><rect x="455.8" y="2181" width="3.0" height="15.0" fill="rgb(236,4,28)" rx="2" ry="2" />
<text  x="458.84" y="2191.5" ></text>
</g>
<g >
<title>put_pid (1 samples, 0.25%)</title><rect x="693.6" y="2293" width="3.0" height="15.0" fill="rgb(242,191,39)" rx="2" ry="2" />
<text  x="696.63" y="2303.5" ></text>
</g>
<g >
<title>operator new(unsigned long, void*) (1 samples, 0.25%)</title><rect x="1094.9" y="2293" width="3.0" height="15.0" fill="rgb(254,53,48)" rx="2" ry="2" />
<text  x="1097.89" y="2303.5" ></text>
</g>
<g >
<title>handle_mm_fault (10 samples, 2.52%)</title><rect x="218.1" y="2325" width="29.7" height="15.0" fill="rgb(226,43,18)" rx="2" ry="2" />
<text  x="221.06" y="2335.5" >ha..</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1813" width="166.4" height="15.0" fill="rgb(222,15,54)" rx="2" ry="2" />
<text  x="24.89" y="1823.5" >[unknown]</text>
</g>
<g >
<title>khugepaged_enter_vma_merge (1 samples, 0.25%)</title><rect x="943.3" y="2005" width="3.0" height="15.0" fill="rgb(223,74,14)" rx="2" ry="2" />
<text  x="946.30" y="2015.5" ></text>
</g>
<g >
<title>khugepaged_enter_vma_merge (1 samples, 0.25%)</title><rect x="1160.3" y="2245" width="2.9" height="15.0" fill="rgb(239,37,42)" rx="2" ry="2" />
<text  x="1163.28" y="2255.5" ></text>
</g>
<g >
<title>insert_vmap_area.constprop.0 (3 samples, 0.76%)</title><rect x="444.0" y="2197" width="8.9" height="15.0" fill="rgb(233,92,19)" rx="2" ry="2" />
<text  x="446.95" y="2207.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="235.9" y="2213" width="3.0" height="15.0" fill="rgb(214,133,45)" rx="2" ry="2" />
<text  x="238.89" y="2223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;::~unique_ptr() (1 samples, 0.25%)</title><rect x="1062.2" y="2133" width="3.0" height="15.0" fill="rgb(226,16,33)" rx="2" ry="2" />
<text  x="1065.19" y="2143.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.25%)</title><rect x="259.7" y="2245" width="2.9" height="15.0" fill="rgb(217,83,34)" rx="2" ry="2" />
<text  x="262.67" y="2255.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;::_Invoker(std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;&amp;&amp;) (1 samples, 0.25%)</title><rect x="904.7" y="2149" width="2.9" height="15.0" fill="rgb(242,110,4)" rx="2" ry="2" />
<text  x="907.66" y="2159.5" ></text>
</g>
<g >
<title>__syscall_return_slowpath (1 samples, 0.25%)</title><rect x="256.7" y="2325" width="3.0" height="15.0" fill="rgb(253,128,42)" rx="2" ry="2" />
<text  x="259.70" y="2335.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.50%)</title><rect x="536.1" y="2197" width="5.9" height="15.0" fill="rgb(205,11,3)" rx="2" ry="2" />
<text  x="539.10" y="2207.5" ></text>
</g>
<g >
<title>__sched_fork (1 samples, 0.25%)</title><rect x="271.6" y="2277" width="2.9" height="15.0" fill="rgb(230,57,33)" rx="2" ry="2" />
<text  x="274.56" y="2287.5" ></text>
</g>
<g >
<title>rmqueue (4 samples, 1.01%)</title><rect x="542.0" y="2181" width="11.9" height="15.0" fill="rgb(233,117,19)" rx="2" ry="2" />
<text  x="545.04" y="2191.5" ></text>
</g>
<g >
<title>rb_insert_color (1 samples, 0.25%)</title><rect x="464.8" y="2213" width="2.9" height="15.0" fill="rgb(246,18,22)" rx="2" ry="2" />
<text  x="467.76" y="2223.5" ></text>
</g>
<g >
<title>do_futex (2 samples, 0.50%)</title><rect x="1139.5" y="2325" width="5.9" height="15.0" fill="rgb(248,29,47)" rx="2" ry="2" />
<text  x="1142.47" y="2335.5" ></text>
</g>
<g >
<title>get_user_pages_fast (1 samples, 0.25%)</title><rect x="1133.5" y="2261" width="3.0" height="15.0" fill="rgb(205,59,41)" rx="2" ry="2" />
<text  x="1136.53" y="2271.5" ></text>
</g>
<g >
<title>- (19 samples, 4.79%)</title><rect x="999.8" y="2117" width="56.4" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="1002.77" y="2127.5" >-</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1237" width="166.4" height="15.0" fill="rgb(241,203,42)" rx="2" ry="2" />
<text  x="24.89" y="1247.5" >[unknown]</text>
</g>
<g >
<title>std::__future_base::_Async_state_commonV2::_M_complete_async() (1 samples, 0.25%)</title><rect x="824.4" y="2325" width="3.0" height="15.0" fill="rgb(252,159,51)" rx="2" ry="2" />
<text  x="827.41" y="2335.5" ></text>
</g>
<g >
<title>__vma_adjust (5 samples, 1.26%)</title><rect x="949.2" y="1989" width="14.9" height="15.0" fill="rgb(236,187,47)" rx="2" ry="2" />
<text  x="952.24" y="1999.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.25%)</title><rect x="1118.7" y="2245" width="2.9" height="15.0" fill="rgb(253,208,13)" rx="2" ry="2" />
<text  x="1121.66" y="2255.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (12 samples, 3.02%)</title><rect x="140.8" y="213" width="35.6" height="15.0" fill="rgb(215,53,19)" rx="2" ry="2" />
<text  x="143.78" y="223.5" >zap..</text>
</g>
<g >
<title>std::thread::_State*&amp; std::__get_helper&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;(std::_Tuple_impl&lt;0ul, std::thread::_State*, std::default_delete&lt;std::thread::_State&gt; &gt;&amp;) (1 samples, 0.25%)</title><rect x="1062.2" y="2085" width="3.0" height="15.0" fill="rgb(234,134,50)" rx="2" ry="2" />
<text  x="1065.19" y="2095.5" ></text>
</g>
<g >
<title>perf_event_task (1 samples, 0.25%)</title><rect x="649.0" y="2261" width="3.0" height="15.0" fill="rgb(225,22,36)" rx="2" ry="2" />
<text  x="652.04" y="2271.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2293" width="166.4" height="15.0" fill="rgb(209,205,16)" rx="2" ry="2" />
<text  x="24.89" y="2303.5" >[unknown]</text>
</g>
<g >
<title>do_syscall_64 (7 samples, 1.76%)</title><rect x="1115.7" y="2357" width="20.8" height="15.0" fill="rgb(227,23,32)" rx="2" ry="2" />
<text  x="1118.69" y="2367.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (13 samples, 3.27%)</title><rect x="366.7" y="2261" width="38.6" height="15.0" fill="rgb(207,106,16)" rx="2" ry="2" />
<text  x="369.68" y="2271.5" >__m..</text>
</g>
<g >
<title>memcpy_erms (6 samples, 1.51%)</title><rect x="607.4" y="2261" width="17.9" height="15.0" fill="rgb(227,156,43)" rx="2" ry="2" />
<text  x="610.43" y="2271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt;, std::allocator&lt;std::__future_base::_Async_state_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int (*)(TransactionManager*, std::function&lt;void (Transaction*)&gt; const&amp;), TransactionManager*, std::function&lt;void (Transaction*)&gt; &gt; &gt;, int&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (6 samples, 1.51%)</title><rect x="857.1" y="2245" width="17.8" height="15.0" fill="rgb(205,87,40)" rx="2" ry="2" />
<text  x="860.10" y="2255.5" ></text>
</g>
<g >
<title>cgroup_post_fork (7 samples, 1.76%)</title><rect x="322.1" y="2277" width="20.8" height="15.0" fill="rgb(248,206,37)" rx="2" ry="2" />
<text  x="325.09" y="2287.5" ></text>
</g>
<g >
<title>mmap (11 samples, 2.77%)</title><rect x="1157.3" y="2405" width="32.7" height="15.0" fill="rgb(222,223,9)" rx="2" ry="2" />
<text  x="1160.30" y="2415.5" >mmap</text>
</g>
<g >
<title>smp_call_function_many (7 samples, 1.76%)</title><rect x="81.3" y="197" width="20.8" height="15.0" fill="rgb(208,19,17)" rx="2" ry="2" />
<text  x="84.34" y="207.5" ></text>
</g>
<g >
<title>__syscall_return_slowpath (1 samples, 0.25%)</title><rect x="256.7" y="2341" width="3.0" height="15.0" fill="rgb(220,21,23)" rx="2" ry="2" />
<text  x="259.70" y="2351.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::future&lt;int&gt;*&gt;(std::future&lt;int&gt;*, std::future&lt;int&gt;*) (1 samples, 0.25%)</title><rect x="1109.7" y="2309" width="3.0" height="15.0" fill="rgb(240,190,32)" rx="2" ry="2" />
<text  x="1112.75" y="2319.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.25%)</title><rect x="1178.1" y="2293" width="3.0" height="15.0" fill="rgb(224,210,4)" rx="2" ry="2" />
<text  x="1181.11" y="2303.5" ></text>
</g>
<g >
<title>userfaultfd_unmap_prep (1 samples, 0.25%)</title><rect x="176.4" y="261" width="3.0" height="15.0" fill="rgb(234,0,22)" rx="2" ry="2" />
<text  x="179.45" y="271.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.25%)</title><rect x="1178.1" y="2277" width="3.0" height="15.0" fill="rgb(252,2,50)" rx="2" ry="2" />
<text  x="1181.11" y="2287.5" ></text>
</g>
<g >
<title>page_counter_try_charge (1 samples, 0.25%)</title><rect x="384.5" y="2197" width="3.0" height="15.0" fill="rgb(229,58,22)" rx="2" ry="2" />
<text  x="387.51" y="2207.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1685" width="166.4" height="15.0" fill="rgb(251,148,38)" rx="2" ry="2" />
<text  x="24.89" y="1695.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="933" width="166.4" height="15.0" fill="rgb(229,104,31)" rx="2" ry="2" />
<text  x="24.89" y="943.5" >[unknown]</text>
</g>
<g >
<title>get_random_u64 (3 samples, 0.76%)</title><rect x="592.6" y="2261" width="8.9" height="15.0" fill="rgb(241,44,35)" rx="2" ry="2" />
<text  x="595.57" y="2271.5" ></text>
</g>
<g >
<title>smp_call_function_single (4 samples, 1.01%)</title><rect x="90.3" y="165" width="11.8" height="15.0" fill="rgb(218,16,19)" rx="2" ry="2" />
<text  x="93.25" y="175.5" ></text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="2053" width="166.4" height="15.0" fill="rgb(247,1,26)" rx="2" ry="2" />
<text  x="24.89" y="2063.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="1493" width="166.4" height="15.0" fill="rgb(223,119,51)" rx="2" ry="2" />
<text  x="24.89" y="1503.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="517" width="166.4" height="15.0" fill="rgb(205,117,21)" rx="2" ry="2" />
<text  x="24.89" y="527.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (56 samples, 14.11%)</title><rect x="21.9" y="693" width="166.4" height="15.0" fill="rgb(239,199,16)" rx="2" ry="2" />
<text  x="24.89" y="703.5" >[unknown]</text>
</g>
<g >
<title>page_counter_cancel (1 samples, 0.25%)</title><rect x="125.9" y="133" width="3.0" height="15.0" fill="rgb(235,102,37)" rx="2" ry="2" />
<text  x="128.92" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (38 samples, 9.57%)</title><rect x="696.6" y="2261" width="112.9" height="15.0" fill="rgb(231,211,21)" rx="2" ry="2" />
<text  x="699.60" y="2271.5" >_raw_spin_unl..</text>
</g>
<g >
<title>copy_namespaces (1 samples, 0.25%)</title><rect x="348.8" y="2277" width="3.0" height="15.0" fill="rgb(247,58,7)" rx="2" ry="2" />
<text  x="351.84" y="2287.5" ></text>
</g>
<g >
<title>change_protection (5 samples, 1.26%)</title><rect x="928.4" y="2021" width="14.9" height="15.0" fill="rgb(244,69,0)" rx="2" ry="2" />
<text  x="931.44" y="2031.5" ></text>
</g>
<g >
<title>copy_namespaces (1 samples, 0.25%)</title><rect x="348.8" y="2261" width="3.0" height="15.0" fill="rgb(206,130,53)" rx="2" ry="2" />
<text  x="351.84" y="2271.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;std::thread::_State&gt;, true&gt;::_Head_base() (1 samples, 0.25%)</title><rect x="1068.1" y="2053" width="3.0" height="15.0" fill="rgb(206,148,32)" rx="2" ry="2" />
<text  x="1071.14" y="2063.5" ></text>
</g>
<g >
<title>_do_fork (185 samples, 46.60%)</title><rect x="259.7" y="2309" width="549.8" height="15.0" fill="rgb(216,53,23)" rx="2" ry="2" />
<text  x="262.67" y="2319.5" >_do_fork</text>
</g>
<g >
<title>alloc_pages_current (27 samples, 6.80%)</title><rect x="479.6" y="2245" width="80.3" height="15.0" fill="rgb(241,42,36)" rx="2" ry="2" />
<text  x="482.62" y="2255.5" >alloc_pag..</text>
</g>
</g>
</svg>
